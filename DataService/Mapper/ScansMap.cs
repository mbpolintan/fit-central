using CsvHelper.Configuration;
using DataService.ViewModels;

namespace DataService.Mapper
{
    public sealed class ScansMap : ClassMap<ScanCSVViewModel>
    {
        public ScansMap()
        {
       
            Map(m => m.MobileNumber).Name(Constants.CsvHeaders.MobileNumber);
            Map(m => m.Height).Name(Constants.CsvHeaders.Height);
            Map(m => m.Gender).Name(Constants.CsvHeaders.Gender);
            Map(m => m.Age).Name(Constants.CsvHeaders.Age);          
            Map(m => m.TestDateTime).Name(Constants.CsvHeaders.TestDateTime);
            Map(m => m.Weight).Name(Constants.CsvHeaders.Weight);
            Map(m => m.LlweightNormalRange).Name(Constants.CsvHeaders.LlweightNormalRange);
            Map(m => m.UlweightNormalRange).Name(Constants.CsvHeaders.UlweightNormalRange);
            Map(m => m.Tbw).Name(Constants.CsvHeaders.Tbw);
            Map(m => m.Lltbw).Name(Constants.CsvHeaders.Lltbw);
            Map(m => m.Ultbw).Name(Constants.CsvHeaders.Ultbw);
            Map(m => m.Icw).Name(Constants.CsvHeaders.Icw);
            Map(m => m.Llicw).Name(Constants.CsvHeaders.Llicw);
            Map(m => m.Ulicw).Name(Constants.CsvHeaders.Ulicw);
            Map(m => m.Ecw).Name(Constants.CsvHeaders.Ecw);
            Map(m => m.Llecw).Name(Constants.CsvHeaders.Llecw);
            Map(m => m.Ulecw).Name(Constants.CsvHeaders.Ulecw); 
            Map(m => m.Protein).Name(Constants.CsvHeaders.Protein);
            Map(m => m.Llprotein).Name(Constants.CsvHeaders.Llprotein);
            Map(m => m.Ulprotein).Name(Constants.CsvHeaders.Ulprotein);
            Map(m => m.Minerals).Name(Constants.CsvHeaders.Minerals);
            Map(m => m.Llminerals).Name(Constants.CsvHeaders.Llminerals);
            Map(m => m.Ulminerals).Name(Constants.CsvHeaders.Ulminerals);
            Map(m => m.Bfm).Name(Constants.CsvHeaders.Bfm);
            Map(m => m.Llbfm).Name(Constants.CsvHeaders.Llbfm);
            Map(m => m.Ulbfm).Name(Constants.CsvHeaders.Ulbfm);
            Map(m => m.Slm).Name(Constants.CsvHeaders.Slm);
            Map(m => m.Llslm).Name(Constants.CsvHeaders.Llslm);
            Map(m => m.Ulslm).Name(Constants.CsvHeaders.Ulslm);
            Map(m => m.Ffm).Name(Constants.CsvHeaders.Ffm);
            Map(m => m.Llffm).Name(Constants.CsvHeaders.Llffm);
            Map(m => m.Ulffm).Name(Constants.CsvHeaders.Ulffm);
            Map(m => m.Smm).Name(Constants.CsvHeaders.Bmi);
            Map(m => m.Llsmm).Name(Constants.CsvHeaders.Llsmm);
            Map(m => m.Ulsmm).Name(Constants.CsvHeaders.Ulsmm);
            Map(m => m.Bmi).Name(Constants.CsvHeaders.Bmi);
            Map(m => m.Llbmi).Name(Constants.CsvHeaders.Llbmi);
            Map(m => m.Ulbmi).Name(Constants.CsvHeaders.Ulbmi);
            Map(m => m.Pbf).Name(Constants.CsvHeaders.Pbf);
            Map(m => m.Llpbf).Name(Constants.CsvHeaders.Llpbf);
            Map(m => m.Ulpbf).Name(Constants.CsvHeaders.Ulpbf);
            Map(m => m.FfmrightArm).Name(Constants.CsvHeaders.FfmrightArm);
            Map(m => m.LlffmrightArm).Name(Constants.CsvHeaders.LlffmrightArm);
            Map(m => m.UlffmrightArm).Name(Constants.CsvHeaders.UlffmrightArm);
            Map(m => m.FfmpercRightArm).Name(Constants.CsvHeaders.FfmpercRightArm);
            Map(m => m.FfmleftArm).Name(Constants.CsvHeaders.FfmleftArm);
            Map(m => m.LlffmleftArm).Name(Constants.CsvHeaders.LlffmleftArm);
            Map(m => m.UlffmleftArm).Name(Constants.CsvHeaders.UlffmleftArm);
            Map(m => m.FfmpercLeftArm).Name(Constants.CsvHeaders.FfmpercLeftArm);
            Map(m => m.Ffmtrunk).Name(Constants.CsvHeaders.Ffmtrunk);
            Map(m => m.Llffmtrunk).Name(Constants.CsvHeaders.Llffmtrunk);
            Map(m => m.Ulffmtrunk).Name(Constants.CsvHeaders.Ulffmtrunk);
            Map(m => m.FfmpercTrunk).Name(Constants.CsvHeaders.FfmpercTrunk);
            Map(m => m.FfmrightLeg).Name(Constants.CsvHeaders.FfmrightLeg);
            Map(m => m.LlffmrightLeg).Name(Constants.CsvHeaders.LlffmrightLeg);
            Map(m => m.UlffmrightLeg).Name(Constants.CsvHeaders.UlffmrightLeg);
            Map(m => m.FfmpercRightLeg).Name(Constants.CsvHeaders.FfmpercRightLeg);
            Map(m => m.FfmleftLeg).Name(Constants.CsvHeaders.FfmleftLeg);
            Map(m => m.LlffmleftLeg).Name(Constants.CsvHeaders.LlffmleftLeg);
            Map(m => m.UlffmleftLeg).Name(Constants.CsvHeaders.UlffmleftLeg);
            Map(m => m.FfmpercLeftLeg).Name(Constants.CsvHeaders.FfmpercLeftLeg);
            Map(m => m.Ecwtbw).Name(Constants.CsvHeaders.Ecwtbw);
            Map(m => m.BfmrightArm).Name(Constants.CsvHeaders.BfmrightArm);
            Map(m => m.BfmpercRightArm).Name(Constants.CsvHeaders.BfmpercRightArm);
            Map(m => m.BfmleftArm).Name(Constants.CsvHeaders.BfmleftArm);
            Map(m => m.BfmpercLeftArm).Name(Constants.CsvHeaders.BfmpercLeftArm);
            Map(m => m.Bfmtrunk).Name(Constants.CsvHeaders.Bfmtrunk);
            Map(m => m.BfmpercTrunk).Name(Constants.CsvHeaders.BfmpercTrunk);
            Map(m => m.BfmrightLeg).Name(Constants.CsvHeaders.BfmrightLeg);
            Map(m => m.BfmpercRightLeg).Name(Constants.CsvHeaders.BfmpercRightLeg);
            Map(m => m.BfmleftLeg).Name(Constants.CsvHeaders.BfmleftLeg);
            Map(m => m.BfmpercLeftLeg).Name(Constants.CsvHeaders.BfmpercLeftLeg);
            Map(m => m.InBodyScore).Name(Constants.CsvHeaders.InBodyScore);
            Map(m => m.TargetWeight).Name(Constants.CsvHeaders.TargetWeight);
            Map(m => m.WeightControl).Name(Constants.CsvHeaders.WeightControl);
            Map(m => m.Bfmcontrol).Name(Constants.CsvHeaders.Bfmcontrol);
            Map(m => m.Ffmcontrol).Name(Constants.CsvHeaders.Ffmcontrol);
            Map(m => m.Bmr).Name(Constants.CsvHeaders.Bmr);
            Map(m => m.Whr).Name(Constants.CsvHeaders.Whr);
            Map(m => m.Llwhr).Name(Constants.CsvHeaders.Llwhr);
            Map(m => m.Ulwhr).Name(Constants.CsvHeaders.Ulwhr);
            Map(m => m.Vfl).Name(Constants.CsvHeaders.Vfl);
            Map(m => m.ObesityDegree).Name(Constants.CsvHeaders.ObesityDegree);
            Map(m => m.LlobesityDegree).Name(Constants.CsvHeaders.LlobesityDegree);
            Map(m => m.UlobesityDegree).Name(Constants.CsvHeaders.UlobesityDegree);
            Map(m => m.Bcm).Name(Constants.CsvHeaders.Bcm);
            Map(m => m.Llbcm).Name(Constants.CsvHeaders.Llbcm);
            Map(m => m.Ulbcm).Name(Constants.CsvHeaders.Ulbcm);
            Map(m => m.Ac).Name(Constants.CsvHeaders.Ac);
            Map(m => m.Amc).Name(Constants.CsvHeaders.Amc);
            Map(m => m.Bmc).Name(Constants.CsvHeaders.Bmc);
            Map(m => m.Llbmc).Name(Constants.CsvHeaders.Llbmc);
            Map(m => m.Ulbmc).Name(Constants.CsvHeaders.Ulbmc);
            Map(m => m._5kHzRaimpedance).Name(Constants.CsvHeaders._5kHzRaimpedance);
            Map(m => m._5kHzLaimpedance).Name(Constants.CsvHeaders._5kHzLaimpedance);
            Map(m => m._5kHzTrimpedance).Name(Constants.CsvHeaders._5kHzTrimpedance);
            Map(m => m._5kHzRlimpedance).Name(Constants.CsvHeaders._5kHzRlimpedance);
            Map(m => m._5kHzLlimpedance).Name(Constants.CsvHeaders._5kHzLlimpedance);
            Map(m => m._50kHzRaimpedance).Name(Constants.CsvHeaders._50kHzRaimpedance);
            Map(m => m._50kHzLaimpedance).Name(Constants.CsvHeaders._50kHzLaimpedance);
            Map(m => m._50kHzTrimpedance).Name(Constants.CsvHeaders._50kHzTrimpedance);
            Map(m => m._50kHzRlimpedance).Name(Constants.CsvHeaders._50kHzRlimpedance);
            Map(m => m._50kHzLlimpedance).Name(Constants.CsvHeaders._50kHzLlimpedance);
            Map(m => m._500kHzRaimpedance).Name(Constants.CsvHeaders._500kHzRaimpedance); 
            Map(m => m._500kHzLaimpedance).Name(Constants.CsvHeaders._500kHzLaimpedance);
            Map(m => m._500kHzTrimpedance).Name(Constants.CsvHeaders._500kHzTrimpedance);
            Map(m => m._500kHzRlimpedance).Name(Constants.CsvHeaders._500kHzRlimpedance);
            Map(m => m._500kHzLlimpedance).Name(Constants.CsvHeaders._500kHzLlimpedance);
            Map(m => m.Mcneck).Name(Constants.CsvHeaders.Mcneck);
            Map(m => m.Mcchest).Name(Constants.CsvHeaders.Mcchest);
            Map(m => m.Mcabdomen).Name(Constants.CsvHeaders.Mcabdomen);
            Map(m => m.Mchip).Name(Constants.CsvHeaders.Mchip);
            Map(m => m.McrightArm).Name(Constants.CsvHeaders.McrightArm);
            Map(m => m.McleftArm).Name(Constants.CsvHeaders.McleftArm);
            Map(m => m.McrightThigh).Name(Constants.CsvHeaders.McrightThigh);
            Map(m => m.McleftThigh).Name(Constants.CsvHeaders.McleftThigh);
            Map(m => m.GrowthScore).Name(Constants.CsvHeaders.GrowthScore);
            Map(m => m.ObesityDegreeChild).Name(Constants.CsvHeaders.ObesityDegreeChild);
            Map(m => m.LlobesityDegreeChildNormalRange).Name(Constants.CsvHeaders.LlobesityDegreeChildNormalRange);
            Map(m => m.UlobesityDegreeChildNormalRange).Name(Constants.CsvHeaders.UlobesityDegreeChildNormalRange);
            Map(m => m.Systolic).Name(Constants.CsvHeaders.Systolic);
            Map(m => m.Diastolic).Name(Constants.CsvHeaders.Diastolic);
            Map(m => m.Pulse).Name(Constants.CsvHeaders.Pulse);
            Map(m => m.MeanArteryPressure).Name(Constants.CsvHeaders.MeanArteryPressure);
            Map(m => m.PulsePressure).Name(Constants.CsvHeaders.PulsePressure);
            Map(m => m.RatePressureProduct).Name(Constants.CsvHeaders.RatePressureProduct);
            Map(m => m.Smi).Name(Constants.CsvHeaders.Smi);
        }
    }
}
