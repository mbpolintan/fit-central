@page
@model StudioCentral_External.Pages.MemberDetails.MemberInformationModel
@using DataAccess.Models
@using DataAccess.ViewModels
@using Kendo.Mvc.UI
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
@{ ViewData["Title"] = "Members Management"; }

<head>
    <link rel="stylesheet" href="~/css/memberlisting.css" />
</head>
<div id="member-details-wrapper" class="col col-xs-10">
    <div id="member-details" class="row">
        <div id="member-about" class="col-md-12 placeholder">
            <div id="memberBio">
                <img src="@Model.Member.ImageURL" class="img-member member-details-image" />
                <dl class="member-bio-details">
                    <dt class="name">@Model.Member.FirstName&nbsp;@Model.Member.LastName</dt>
                    <dd class="title"><span class="fa fa-map-marked"></span>&nbsp;@Model.Studio</dd> 
                    <dd class="title"><span class="k-icon k-i-email"></span>&nbsp;@Model.Member.Email</dd>
                    <dd class="phone"><span class="fa fa-mobile-alt"></span>&nbsp;@Model.Member.MobilePhone</dd>
                </dl>
                
            </div>
            @*<div class="text-right">
                <input type="button" class="btn-sm k-primary k-button" id="updateProfile" data-toggle="modal" data-target="#memberProfile" value="Update Profile" />
            </div>*@
        </div>
        <div id="member-tabs" class="col-md-12 placeholder">
            @(Html.Kendo().TabStrip()
                .Name("tabstrip")
                .Events(events => events.Error("onErrorTab"))
                .HtmlAttributes(new { style = "margin-top:0; backgroud-color:#fffff; over-flow:hidden" })
                .Animation(animation => animation.Open(effect => effect.Fade(FadeDirection.In)))
                .SelectedIndex(0)
                .Items(tabstrip => {
                        tabstrip.Add().Text("Profile").Content(@<text>
                            <div id="profile" class="col-md-12 placeholder">
                                <div class="form-group">
                                    <h3 class="text-left">Personal Profile</h3>
                                    <hr />
                                    <div class="col-md-6 col-sm-12 col-sx-12 text-left">
                                        <span class="profile-label col-md-3 col-sm-12 col-sx-12">First Name :</span>
                                        <input class="profile-detail col-md-9 col-sm-12 col-sx-12" id="firstName" readonly value="@Model.Member.FirstName" />
                                    </div>
                                    <div class="col-md-6 col-sm-12 col-sx-12 text-left">
                                        <span class="profile-label col-md-3 col-sm-12 col-sx-12"> Scanner Logon :</span>
                                        <input class="profile-detail col-md-9 col-sm-12 col-sx-12" id="scannerNo" readonly value="@Model.Member.ScannerMobile" />
                                    </div>
                                    <div class="col-md-6 col-sm-12 col-sx-12 text-left">
                                        <span class="profile-label col-md-3 col-sm-12 col-sx-12"> Last Name :</span>
                                        <input class="profile-detail col-md-9 col-sm-12 col-sx-12" id="lastName" readonly value="@Model.Member.LastName" />
                                    </div>
                                    <div class="col-md-6 col-sm-12 col-sx-12 text-left">
                                        <span class="profile-label col-md-3 col-sm-12 col-sx-12"> Mobile Phone :</span>
                                        <input class="profile-detail col-md-9 col-sm-12 col-sx-12" id="mobileNo" readonly value="@Model.Member.MobilePhone" />
                                    </div>
                                    <div class="col-md-6 col-sm-12 col-sx-12 text-left">
                                        <span class="profile-label col-md-3 col-sm-12 col-sx-12" > Date Of Birth :</span>
                                        <input class="profile-detail col-md-9 col-sm-12 col-sx-12" id="dob" readonly value="@Model.Member.Dob" />
                                    </div>
                                    <div class="col-md-6 col-sm-12 col-sx-12 text-left">
                                        <span class="profile-label col-md-3 col-sm-12 col-sx-12"> Work Phone :</span>
                                        <input class="profile-detail col-md-9 col-sm-12 col-sx-12" id="workNo" readonly value="@Model.Member.WorkPhone" />
                                    </div>
                                    <div class="col-md-6 col-sm-12 col-sx-12 text-left">
                                        <span class="profile-label col-md-3 col-sm-12 col-sx-12"> Gender :</span>
                                        <input class="profile-detail col-md-9 col-sm-12 col-sx-12" id="gender" readonly value="@Model.Member.Gender" />
                                    </div>
                                    <div class="col-md-6 col-sm-12 col-sx-12 text-left">
                                        <span class="profile-label col-md-3 col-sm-12 col-sx-12"> Home Phone :</span>
                                        <input class="profile-detail col-md-9 col-sm-12 col-sx-12" id="homeNo" readonly value="@Model.Member.HomePhone" />
                                    </div>
                                    <div class="col-md-6 col-sm-12 col-sx-12 text-left">
                                        <span class="profile-label col-md-3 col-sm-12 col-sx-12"> Status :</span>
                                        <input class="profile-detail col-md-9 col-sm-12 col-sx-12" id="status" readonly  value="@Model.Member.Status" />
                                    </div>
                                    <div class="col-md-6 col-sm-12 col-sx-12 text-left">
                                        <span class="profile-label col-md-3 col-sm-12 col-sx-12"> City :</span>
                                        <input class="profile-detail col-md-9 col-sm-12 col-sx-12" id="city" readonly  value="@Model.Member.City" />
                                    </div>
                                    <div class="col-md-6 col-sm-12 col-sx-12 text-left">
                                        <span class="profile-label col-md-3 col-sm-12 col-sx-12"> Address Line 1 :</span>
                                        <input class="profile-detail col-md-9 col-sm-12 col-sx-12" id="addressOne" readonly value="@Model.Member.AddressLine1" />
                                    </div>
                                    <div class="col-md-6 col-sm-12 col-sx-12 text-left">
                                        <span class="profile-label col-md-3 col-sm-12 col-sx-12" > State :</span>
                                        <input class="profile-detail col-md-9 col-sm-12 col-sx-12" id="state" readonly value="@Model.Member.State" />
                                    </div>
                                    <div class="col-md-6 col-sm-12 col-sx-12 text-left">
                                        <span class="profile-label col-md-3 col-sm-12 col-sx-12"> Address Line 2 :</span>
                                        <input class="profile-detail col-md-9 col-sm-12 col-sx-12" id="addressTwo" readonly value="@Model.Member.AddressLine2" />
                                    </div>
                                    <div class="col-md-6 col-sm-12 col-sx-12 text-left">
                                        <span class="profile-label col-md-3 col-sm-12 col-sx-12"> Country :</span>
                                        <input class="profile-detail col-md-9 col-sm-12 col-sx-12" id="country" readonly value="@Model.Member.Country" />
                                    </div>
                                    <div class="col-md-6 col-sm-12 col-sx-12 text-left">
                                        <span class="profile-label col-md-3 col-sm-12 col-sx-12"> Postal Code :</span>
                                        <input class="profile-detail col-md-9 col-sm-12 col-sx-12" id="postal" readonly value="@Model.Member.PostalCode" />
                                    </div>
                                    <div class="col-md-6 col-sm-12 col-sx-12 text-left">
                                        <span class="profile-label col-md-3 col-sm-12 col-sx-12"> Referred By :</span>
                                        <input class="profile-detail col-md-9 col-sm-12 col-sx-12" id="referral" readonly value="@Model.Member.ReferredBy" />
                                    </div>

                                </div>
                                <div class="form-group">
                                    <h3 class="text-left">Contact Person In Case Of Emergency</h3>
                                    <hr />
                                    <div class="col-md-6 col-sm-12 col-sx-12 text-left">
                                        <span class="profile-label col-md-3 col-sm-12 col-sx-12"> Name:</span>
                                        <input class="profile-detail col-md-9 col-sm-12 col-sx-12" id="cPerson" readonly value="@Model.Member.EmergencyContactInfoName" />
                                    </div>
                                    <div class="col-md-6 col-sm-12 col-sx-12 text-left">
                                        <span class="profile-label col-md-3 col-sm-12 col-sx-12"> Mobile Phone :</span>
                                        <input class="profile-detail col-md-9 col-sm-12 col-sx-12" id="cMobileNo" readonly value="@Model.Member.EmergencyContactInfoPhone" />
                                    </div>
                                    <div class="col-md-6 col-sm-12 col-sx-12 text-left">
                                        <span class="profile-label col-md-3 col-sm-12 col-sx-12"> Relationship:</span>
                                        <input class="profile-detail col-md-9 col-sm-12 col-sx-12" id="cRelationship" readonly value="@Model.Member.EmergencyContactInfoRelationship" />
                                    </div>
                                    <div class="col-md-6 col-sm-12 col-sx-12 text-left">
                                        <span class="profile-label col-md-3 col-sm-12 col-sx-12"> Email :</span>
                                        <input class="profile-detail col-md-9 col-sm-12 col-sx-12" id="cEmail" readonly value="@Model.Member.EmergencyContactInfoEmail" />
                                    </div>
                                </div>
                            </div></text>);
                        tabstrip.Add().Text("Scans").Content(@<text>
                            <div class="col-md-12 placeholder">
                                <div class="chart-wrapper">
                                    <h3>Scans Chart</h3>
                                    <div id="chart" style="width:100%;"></div>
                                </div>
                                <h3>Scans Details</h3>
                                <div>
                                @Html.AntiForgeryToken()
                                @(Html.Kendo().Grid<ScanViewModel>()
                                    .Name("gridScan")
                                    .Columns(columns => {
                                        columns.Bound(e => e.TestDateTime).Format("{0:g}").Title("Test Date Time").Filterable(false)
                                        .HtmlAttributes(new { style = "text-align:center" }).HeaderHtmlAttributes(new { style = "text-align:center" });
                                        columns.Bound(e => e.InBodyScore).Format("{0:n2}").Title("In Body Score").HtmlAttributes(new { style = "text-align:right" })
                                        .HeaderHtmlAttributes(new { style = "text-align:center" }).Filterable(false);
                                        columns.Bound(e => e.Weight).Format("{0:n2}").Title("Weight").HtmlAttributes(new { style = "text-align:right" })
                                        .HeaderHtmlAttributes(new { style = "text-align:center" }).Filterable(false);
                                        columns.Bound(e => e.Pbf).Format("{0:n2}").Title("Percentage Body Fat").HtmlAttributes(new { style = "text-align:right" })
                                        .HeaderHtmlAttributes(new { style = "text-align:center" }).Filterable(false);
                                        columns.Bound(e => e.Smm).Format("{0:n2}").Title("Skeletal Muscle Mass").HtmlAttributes(new { style = "text-align:right" })
                                        .HeaderHtmlAttributes(new { style = "text-align:center" }).Filterable(false);
                                        columns.Bound(e => e.Vfl).Title("Visceral Fat Level").HtmlAttributes(new { style = "text-align:right" })
                                        .HeaderHtmlAttributes(new { style = "text-align:center" }).Filterable(false);
                                    })
                                   .Navigatable()
                                    .Sortable()
                                    .Filterable(filterable => filterable.Extra(false)
                                        .Operators(operators => operators.ForString(str => str.Clear().StartsWith("Starts with").IsEqualTo("Is equal to").IsNotEqualTo("Is not equal to"))))
                                    .Scrollable(sc => sc.Endless(true).Enabled(true))
                                    .Mobile()
                                    .HtmlAttributes(new { style = "width:100%;height:500px;font-size:13px;padding:0;white-space:normal;" })

                                    .DataSource(dataSource => dataSource.Ajax().Read(r => r.Url("/MemberDetails/MemberInformation?handler=ReadMemberScans").Data("forgeryToken"))))
                                </div>
                            </div></text>);
                        @*tabstrip.Add().Text("Membership").Content(@<text>
                            <div class="col-md-12 placeholder">                              
                            @(Html.Kendo().Grid<MbclientActiveMembership>()
                                .Name("gridMembership")
                                .Columns(columns =>
                                {
                                    columns.Bound(e => e.Name).Title("Membership").Filterable(false)
                                        .HeaderHtmlAttributes(new { style = "text-align:center" });
                                    columns.Bound(e => e.ActiveDate).Format("{0:d}").Title("Active Date").Filterable(false)
                                        .HtmlAttributes(new { style = "text-align:center" }).HeaderHtmlAttributes(new { style = "text-align:center" });
                                    columns.Bound(e => e.ExpirationDate).Format("{0:d}").Title("Expiration Date").Filterable(false)
                                        .HtmlAttributes(new { style = "text-align:center" }).HeaderHtmlAttributes(new { style = "text-align:center" });
                                    columns.Bound(e => e.PaymentDate).Format("{0:d}").Title("Payment Date").Filterable(false)
                                        .HtmlAttributes(new { style = "text-align:center" }).HeaderHtmlAttributes(new { style = "text-align:center" });
                                    columns.Bound(e => e.Count).Title("No. of Sessions").HtmlAttributes(new { style = "text-align:right" })
                                        .HeaderHtmlAttributes(new { style = "text-align:center" }).Filterable(false);
                                    columns.Bound(e => e.Remaining).Title("Remaining Sessions").HtmlAttributes(new { style = "text-align:right" })
                                        .HeaderHtmlAttributes(new { style = "text-align:center" }).Filterable(false);
                                    columns.Bound(e => e.Current).Filterable(false)
                                        .ClientTemplate("#=Current ? '<input type=\"checkbox\" checked disabled />' : '<input type=\"checkbox\" disabled />' #")
                                        .Title("Current").HtmlAttributes(new { style = "text-align:center" }).HeaderHtmlAttributes(new { style = "text-align:center" });
                                    columns.Bound(e => e.Action).Title("Action").Filterable(false)
                                        .HtmlAttributes(new { style = "text-align:center" }).HeaderHtmlAttributes(new { style = "text-align:center" });
                                })
                                .Navigatable()
                                .Sortable()
                                .Filterable(filterable => filterable.Extra(false)
                                    .Operators(operators => operators.ForString(str => str.Clear().StartsWith("Starts with").IsEqualTo("Is equal to").IsNotEqualTo("Is not equal to"))))
                                .Scrollable(sc => sc.Endless(true).Enabled(true))
                                .Mobile()
                                .HtmlAttributes(new { style = "width:100%;height:500px; font-size:13px; padding:0" })
                                .Search(search =>
                                {
                                    search
                                    .Field(f => f.Name)
                                    .Field(f => f.Action);
                                })
                                .DataSource(dataSource => dataSource.Ajax().Read(r => r.Url("/MemberDetails/MemberInformation?handler=ReadMembership").Data("forgeryToken"))))
                            </div></text>);*@
                        tabstrip.Add().Text("Contracts").Content(@<text>
                            <div class="col-md-12 placeholder">
                                @(Html.Kendo().Grid<ContractsViewModel>()
                                .Name("gridContracts")
                                .Columns(columns =>
                                {
                                    columns.Bound(e => e.ContractName).Title("Contract Name").Filterable(false)
                                    .HeaderHtmlAttributes(new { style = "text-align:center" });
                                    columns.Bound(e => e.AgreementDate).Format("{0:d}").Title("Agreement Date").Filterable(false)
                                    .HtmlAttributes(new { style = "text-align:center" }).HeaderHtmlAttributes(new { style = "text-align:center" });
                                    columns.Bound(e => e.StartDate).Format("{0:d}").Title("Start Date").Filterable(false)
                                    .HtmlAttributes(new { style = "text-align:center" }).HeaderHtmlAttributes(new { style = "text-align:center" });
                                    columns.Bound(e => e.EndDate).Format("{0:d}").Title("End Date").Filterable(false)
                                    .HtmlAttributes(new { style = "text-align:center" }).HeaderHtmlAttributes(new { style = "text-align:center" });
                                    columns.Bound(e => e.AutopayStatus).Title("Auto Pay Status").Filterable(false)
                                    .HeaderHtmlAttributes(new { style = "text-align:center" });
                                })
                                .Navigatable()
                                .Sortable()
                                .Filterable(filterable => filterable.Extra(false)
                                    .Operators(operators => operators.ForString(str => str.Clear().StartsWith("Starts with").IsEqualTo("Is equal to").IsNotEqualTo("Is not equal to"))))
                                .Scrollable(sc => sc.Endless(true).Enabled(true))
                                .Mobile()
                                .HtmlAttributes(new { style = "width:100%;height:500px; font-size:13px;padding:0;white-space:normal;" })
                                    .Search(search => search.Field(f => f.ContractName))
                                    .DataSource(dataSource => dataSource.Ajax().Read(r => r.Url("/MemberDetails/MemberInformation?handler=ReadContract").Data("forgeryToken"))))
                            </div></text>);
                        tabstrip.Add().Text("Visits").Content(@<text>
                            <div class="col-md-12 placeholder">
                                @(Html.Kendo().Grid<VwVisits>()
                                    .Name("gridVisits")
                                    .Columns(columns =>
                                    {
                                        columns.Bound(e => e.StartDateTime).Format("{0:d}").Title("Date").Filterable(false)
                                        .HtmlAttributes(new { style = "text-align:center" }).HeaderHtmlAttributes(new { style = "text-align:center" });
                                        columns.Bound(e => e.Time).Title("Time").Filterable(false)
                                        .HtmlAttributes(new { style = "text-align:center" }).HeaderHtmlAttributes(new { style = "text-align:center" });
                                        columns.Bound(e => e.Description).Title("Description").Filterable(false)
                                        .HeaderHtmlAttributes(new { style = "text-align:center" });
                                        columns.Bound(e => e.Teacher).Title("Teacher").Filterable(false)
                                        .HeaderHtmlAttributes(new { style = "text-align:center" });
                                        columns.Bound(e => e.Status).Title("Status").Filterable(false)
                                        .HeaderHtmlAttributes(new { style = "text-align:center" });
                                        columns.Bound(e => e.PaymentInfo).Title("Service").Filterable(false)
                                        .HeaderHtmlAttributes(new { style = "text-align:center" });
                                    })
                                    .Navigatable()
                                    .Sortable()
                                    .ToolBar(tb => tb.ClientTemplateId("GridToolbarVisitsTemplate"))
                                    .Filterable(filterable => filterable.Extra(false)
                                        .Operators(operators => operators.ForString(str => str.Clear().StartsWith("Starts with").IsEqualTo("Is equal to").IsNotEqualTo("Is not equal to"))))
                                    .Scrollable(sc => sc.Endless(true).Enabled(true))
                                    .Mobile()
                                    .HtmlAttributes(new { style = "width:100%;height:500px;font-size:13px; padding:0; white-space:normal;" })
                                    .DataSource(dataSource => dataSource.Ajax().Read(r => r.Url("/MemberDetails/MemberInformation?handler=ReadVisits").Data("forgeryToken"))))
                            </div></text>);
                        @*tabstrip.Add().Text("Purchases").Content(@<text>
                            <div class="col-md-12 placeholder">
                                @(Html.Kendo().Grid<Purchases>()
                                    .Name("gridPurchases")
                                    .Columns(columns =>
                                    {
                                        columns.Bound(e => e.SaleDate).Title("Sale Date").Format("{0:d}").Filterable(false)
                                        .HtmlAttributes(new { style = "text-align:center" }).HeaderHtmlAttributes(new { style = "text-align:center" });
                                        columns.Bound(e => e.SaleTime).Title("Sale Time").Format("{0:T}").Filterable(false)
                                        .HtmlAttributes(new { style = "text-align:center" }).HeaderHtmlAttributes(new { style = "text-align:center" });
                                        columns.Bound(e => e.Description).Title("Description").Width("20%").Filterable(false)
                                        .HeaderHtmlAttributes(new { style = "text-align:center" });
                                        columns.Bound(e => e.Price).Title("Price").Format("{0:c}").HtmlAttributes(new { style = "text-align:right" })
                                        .HeaderHtmlAttributes(new { style = "text-align:center" }).Filterable(false);
                                        columns.Bound(e => e.Quantity).Title("Quantity").HtmlAttributes(new { style = "text-align:right" })
                                        .HeaderHtmlAttributes(new { style = "text-align:center" }).Filterable(false);
                                        columns.Bound(e => e.Discount).Title("Discount").HtmlAttributes(new { style = "text-align:right" })
                                        .HeaderHtmlAttributes(new { style = "text-align:center" }).Filterable(false);
                                        columns.Bound(e => e.Tax).Title("Tax").HtmlAttributes(new { style = "text-align:right" })
                                        .HeaderHtmlAttributes(new { style = "text-align:center" }).Filterable(false);
                                        columns.Bound(e => e.AmountPaid).Title("Amount Paid").Format("{0:c}").HtmlAttributes(new { style = "text-align:right" })
                                        .HeaderHtmlAttributes(new { style = "text-align:center" }).Filterable(false);
                                        columns.Bound(e => e.Returned).Title("Returned").Filterable(false)
                                        .ClientTemplate("#=Returned ? '<input type=\"checkbox\" checked disabled />' : '<input type=\"checkbox\" disabled />' #")
                                        .HtmlAttributes(new { @class = "text-center" }).HeaderHtmlAttributes(new { style = "text-align:center" });
                                        columns.Bound(e => e.AccountPayment).Title("Account Payment").Filterable(false)
                                        .ClientTemplate("#=AccountPayment ? '<input type=\"checkbox\" checked disabled />' : '<input type=\"checkbox\" disabled />' #")
                                        .HtmlAttributes(new { @class = "text-center" }).HeaderHtmlAttributes(new { style = "text-align:center" });
                                    })
                                    .Navigatable()
                                    .Sortable()
                                    .Filterable(filterable => filterable.Extra(false)
                                        .Operators(operators => operators.ForString(str => str.Clear().StartsWith("Starts with").IsEqualTo("Is equal to").IsNotEqualTo("Is not equal to"))))
                                    .Scrollable(sc => sc.Endless(true).Enabled(true))
                                    .Mobile()
                                    .HtmlAttributes(new { style = "width:100%; height:500px;font-size:13px; padding:0; white-space:normal;" })
                                    .DataSource(dataSource => dataSource.Ajax().Read(r => r.Url("/MemberDetails/MemberInformation?handler=ReadPurchase").Data("forgeryToken"))))
                            </div></text>);*@
                        tabstrip.Add().Text("Challenges").Content(@<text>
                            <div class="col-md-12 placeholder">
                                @(Html.Kendo().Grid<VwScans>()
                                        .Name("gridChallenges")
                                        .Columns(columns =>
                                        {
                                            columns.Bound(c => c.ChallengeNo).Filterable(false)
                                            .HeaderHtmlAttributes(new { style = "text-align:center" }).HtmlAttributes(new { style = "text-align:right" });
                                            columns.Group(group => group.Title("Mid Scan Result").HeaderHtmlAttributes(new { style = "text-align:center" })
                                              .Columns(info =>
                                              {
                                                  info.Bound(c => c.MidInBodyTotal).Title("In Body Score (Gain)").Filterable(false)
                                                  .HeaderHtmlAttributes(new { style = "text-align:center" }).HtmlAttributes(new { style = "text-align:right" });
                                                  info.Bound(c => c.MidWeightTotal).Format("{0:n3}%").Title("Weight (Loss)").Filterable(false)
                                                  .HeaderHtmlAttributes(new { style = "text-align:center" }).HtmlAttributes(new { style = "text-align:right" });
                                                  info.Bound(c => c.MidPbftotal).Format("{0:n3}%").Title("PBF (Loss)").Filterable(false)
                                                  .HeaderHtmlAttributes(new { style = "text-align:center" }).HtmlAttributes(new { style = "text-align:right" });
                                                  info.Bound(c => c.MidSmmtotal).Format("{0:n3}%").Title("SMM (Gain)").Filterable(false)
                                                  .HeaderHtmlAttributes(new { style = "text-align:center" }).HtmlAttributes(new { style = "text-align:right" });
                                                  info.Bound(c => c.MidVfltotal).Title("VFL (Loss)").Filterable(false)
                                                  .HeaderHtmlAttributes(new { style = "text-align:center" }).HtmlAttributes(new { style = "text-align:right" });
                                              }));
                                            columns.Group(group => group.Title("End Scan Result").HeaderHtmlAttributes(new { style = "text-align:center" })
                                              .Columns(info =>
                                              {
                                                  info.Bound(c => c.EndInBodyTotal).Title("In Body Score (Gain)").Filterable(false)
                                                  .HeaderHtmlAttributes(new { style = "text-align:center" }).HtmlAttributes(new { style = "text-align:right" });
                                                  info.Bound(c => c.EndWeightTotal).Format("{0:n3}%").Title("Weight (Loss)").Filterable(false)
                                                  .HeaderHtmlAttributes(new { style = "text-align:center" }).HtmlAttributes(new { style = "text-align:right" });
                                                  info.Bound(c => c.EndPbftotal).Format("{0:n3}%").Title("PBF (Loss)").Filterable(false)
                                                  .HeaderHtmlAttributes(new { style = "text-align:center" }).HtmlAttributes(new { style = "text-align:right" });
                                                  info.Bound(c => c.EndSmmtotal).Format("{0:n3}%").Title("SMM (Gain)").Filterable(false)
                                                  .HeaderHtmlAttributes(new { style = "text-align:center" }).HtmlAttributes(new { style = "text-align:right" });
                                                  info.Bound(c => c.EndVfltotal).Title("VFL (Loss)").Filterable(false)
                                                  .HeaderHtmlAttributes(new { style = "text-align:center" }).HtmlAttributes(new { style = "text-align:right" });
                                              }));
                                            columns.Bound(c => c.AttendedClass).Title("Total Class Attended").Filterable(false)
                                            .HeaderHtmlAttributes(new { style = "text-align:center" }).HtmlAttributes(new { style = "text-align:right" });
                                        })
                                        .ToolBar(tb =>
                                        {
                                            tb.Search();
                                            tb.Custom().Text("&nbsp;&nbsp;Join Next Challenge").IconClass("fas fa-universal-access").HtmlAttributes(new { id = "joinChallenge", @style = "font-size:100%;float:left;", });
                                        })
                                        .ClientDetailTemplateId("beforeandafterTemplate")
                                        .Events(e => e.DataBound("onDataBound").DetailExpand("onGroupExpand"))
                                        .Navigatable()
                                        .Sortable()
                                        .Filterable(filterable => filterable.Extra(false)
                                            .Operators(operators => operators.ForString(str => str.Clear().StartsWith("Starts with").IsEqualTo("Is equal to").IsNotEqualTo("Is not equal to"))))
                                        .Scrollable(sc => sc.Endless(true).Enabled(true))
                                        .Mobile()
                                        .HtmlAttributes(new { style = "width:100%;height:500px;padding:0; white-space:normal;" })

                                        .Search(search =>search.Field(f => f.ChallengeNo))
                                        .DataSource(dataSource => dataSource
                                            .Ajax()
                                            .Read(r => r.Url("/MemberDetails/MemberInformation?handler=ReadMemberChallenge").Data("forgeryToken"))))
                            </div></text>);
                    }))
        </div>
    </div>
</div>


@* Templates *@
<script id="beforeandafterTemplate" type="text/kendo-tmpl">
    <div>
        @Html.AntiForgeryToken()
        @(Html.Kendo().Grid<ChallengeMemberScanViewModel>()
        .Name("grid_#=ChallengeMemberId#")
        .Columns(columns => {
        columns.Group(group => group.Title("In Body Score").HeaderHtmlAttributes(new { style = "text-align:center" })
            .Columns(info =>
            {
                info.Bound(x => x.SInBodyScore).Width("10%").Format("{0:n2}").Title("Start")
                .HtmlAttributes(new { style = "text-align:right" }).HeaderHtmlAttributes(new { style = "text-align:center" }).Filterable(false);
                info.Bound(x => x.MInBodyScore).Width("10%").Format("{0:n2}").Title("Mid")
                .HtmlAttributes(new { style = "text-align:right" }).HeaderHtmlAttributes(new { style = "text-align:center" }).Filterable(false);
                info.Bound(x => x.EInBodyScore).Width("10%").Format("{0:n2}").Title("End")
                .HtmlAttributes(new { style = "text-align:right" }).HeaderHtmlAttributes(new { style = "text-align:center" }).Filterable(false);
            }));
        columns.Group(group => group.Title("Weight").HeaderHtmlAttributes(new { style = "text-align:center" })
            .Columns(info =>
            {
                info.Bound(x => x.SWeight).Width("10%").Format("{0:n2}").Title("Start")
                .HtmlAttributes(new { style = "text-align:right" }).HeaderHtmlAttributes(new { style = "text-align:center" }).Filterable(false);
                info.Bound(x => x.MWeight).Width("10%").Format("{0:n2}").Title("Mid")
                .HtmlAttributes(new { style = "text-align:right" }).HeaderHtmlAttributes(new { style = "text-align:center" }).Filterable(false);
                info.Bound(x => x.EWeight).Width("10%").Format("{0:n2}").Title("End")
                .HtmlAttributes(new { style = "text-align:right" }).HeaderHtmlAttributes(new { style = "text-align:center" }).Filterable(false);
            }));
        columns.Group(group => group.Title("Percent Body Fat").HeaderHtmlAttributes(new { style = "text-align:center" })
            .Columns(info =>
            {
                info.Bound(x => x.SPBF).Width("10%").Format("{0:n2}").Title("Start")
                .HtmlAttributes(new { style = "text-align:right" }).HeaderHtmlAttributes(new { style = "text-align:center" }).Filterable(false);
                info.Bound(x => x.MPBF).Width("10%").Format("{0:n2}").Title("Mid")
                .HtmlAttributes(new { style = "text-align:right" }).HeaderHtmlAttributes(new { style = "text-align:center" }).Filterable(false);
                info.Bound(x => x.EPBF).Width("10%").Format("{0:n2}").Title("End")
                .HtmlAttributes(new { style = "text-align:right" }).HeaderHtmlAttributes(new { style = "text-align:center" }).Filterable(false);
            }));
        columns.Group(group => group.Title("Visceral Fat Level").HeaderHtmlAttributes(new { style = "text-align:center" })
            .Columns(info =>
            {
                info.Bound(x => x.SVFL).Width("10%").Format("{0:n2}").Title("Start")
                .HtmlAttributes(new { style = "text-align:right" }).HeaderHtmlAttributes(new { style = "text-align:center" }).Filterable(false);
                info.Bound(x => x.MVFL).Width("10%").Format("{0:n2}").Title("Mid")
                .HtmlAttributes(new { style = "text-align:right" }).HeaderHtmlAttributes(new { style = "text-align:center" }).Filterable(false);
                info.Bound(x => x.EVFL).Width("10%").Format("{0:n2}").Title("End")
                .HtmlAttributes(new { style = "text-align:right" }).HeaderHtmlAttributes(new { style = "text-align:center" }).Filterable(false);
            }));
        columns.Group(group => group.Title("Skeletal Muscle Mass").HeaderHtmlAttributes(new { style = "text-align:center" })
            .Columns(info =>
            {
                info.Bound(x => x.SSMM).Width("10%").Format("{0:n2}").Title("Start")
                .HtmlAttributes(new { style = "text-align:right" }).HeaderHtmlAttributes(new { style = "text-align:center" }).Filterable(false);
                info.Bound(x => x.MSMM).Width("10%").Format("{0:n2}").Title("Mid")
                .HtmlAttributes(new { style = "text-align:right" }).HeaderHtmlAttributes(new { style = "text-align:center" }).Filterable(false);
                info.Bound(x => x.ESMM).Width("10%").Format("{0:n2}").Title("End")
                .HtmlAttributes(new { style = "text-align:right" }).HeaderHtmlAttributes(new { style = "text-align:center" }).Filterable(false);
            }));
        })
        .Navigatable().Sortable().Mobile()
        .Scrollable(sc => sc.Endless(true))
        .Filterable(filterable => filterable.Extra(false).Operators(operators => operators.ForString(str => str.Clear().StartsWith("Starts with").IsEqualTo("Is equal to").IsNotEqualTo("Is not equal to"))))
        .HtmlAttributes(new { style = "width:100%; height:200px; font-size:13px; padding:0" })
        .DataSource(dataSource => dataSource
            .Ajax()
            .Read(r => r.Url("/MemberDetails/MemberInformation?handler=ReadMemberChallengeScans&challengeMemberId=#=ChallengeMemberId#").Data("forgeryToken")))
            .ToClientTemplate())

    </div>
    <div>
        <div class="col-md-6" style="overflow:hidden; float:left">
            <h6>Before</h6>
            <div class="col-md-4" style="overflow:hidden; float:left">
                <div class="card">
                    <div class="card-body" style="text-align:center; min-height:150px; max-height:150px;">
                        <img src="/images/images.jfif" id="before-front-#=ChallengeMemberId#" class="imageDisplay img-thumbnail before-front" style="min-height:150px; max-height:150px;" />
                    </div>
                </div>
            </div>
            <div class="col-md-4" style="overflow:hidden; float:left">
                <div class="card">
                    <div class="card-body" style="text-align:center; min-height:150px; max-height:150px;">
                        <img src="/images/images.jfif" id="before-side-#=ChallengeMemberId#" class="imageDisplay img-thumbnail before-side" style="min-height:150px; max-height:150px;" />
                    </div>
                </div>
            </div>
            <div class="col-md-4" style="overflow:hidden; float:left">
                <div class="card">
                    <div class="card-body" style="text-align:center; min-height:150px; max-height:150px;">
                        <img src="/images/images.jfif" id="before-back-#=ChallengeMemberId#" class="imageDisplay img-thumbnail before-back" style="min-height:150px; max-height:150px;" />
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-6" style="overflow:hidden; float:left">
            <h6>After</h6>
            <div class="col-md-4" style="overflow:hidden; float:left">
                <div class="card">
                    <div class="card-body" style="text-align:center; min-height:150px; max-height:150px;">
                        <img src="/images/images.jfif" id="after-front-#=ChallengeMemberId#" class="imageDisplay img-thumbnail after-front" style="min-height:150px; max-height:150px;" />
                    </div>
                </div>
            </div>
            <div class="col-md-4" style="overflow:hidden; float:left">
                <div class="card">
                    <div class="card-body" style="text-align:center; min-height:150px; max-height:150px;">
                        <img src="/images/images.jfif" id="after-side-#=ChallengeMemberId#" class="imageDisplay img-thumbnail after-side" style="min-height:150px; max-height:150px;" />
                    </div>
                </div>
            </div>
            <div class="col-md-4" style="overflow:hidden; float:left">
                <div class="card">
                    <div class="card-body" style="text-align:center; min-height:150px; max-height:150px;">
                        <img src="/images/images.jfif" id="after-back-#=ChallengeMemberId#" class="imageDisplay img-thumbnail after-back" style="min-height:150px; max-height:150px;" />
                    </div>
                </div>
            </div>
        </div>
    </div>
</script>

<script id="GridToolbarVisitsTemplate" type="text/x-kendo-template">
    <div id="visits" class="placeholder">
        <div class="col-md-6 text-left">
            <span class="profile-label col-md-4 col-sm-4 col-xs-4"> Total Attendance:</span>
            <input class="profile-detail col-md-8 col-sm-8 col-xs-8 text-right" id="signedIn" readonly />
        </div>
        <div class="col-md-6 text-left">
            <span class="profile-label col-md-4 col-sm-4 col-xs-4"> Absences/Cancelled:</span>
            <input class="profile-detail col-md-8 col-sm-8 col-xs-8 text-right" id="absences" readonly />
        </div>
        <div class="col-md-6 text-left">
            <span class="profile-label col-md-4 col-sm-4 col-xs-4">Total Bookings:</span>
            <input class="profile-detail col-md-8 col-sm-8 col-xs-8 text-right" id="totalVisits" readonly />
        </div>
        <div class="col-md-6 text-left">
            <span class="profile-label col-md-4 col-sm-4 col-xs-4"> Late Cancelled:</span>
            <input class="profile-detail col-md-8 col-sm-8 col-xs-8 text-right" id="lateCancelled" readonly />
        </div>
        <div id="achievements" class="col-md-6 text-left">
            <span class="profile-label col-md-4 col-sm-4 col-xs-4"> Achievements:</span>
        </div>
    </div>
</script>

<script type="text/javascript">
    var studioId = 0;
    var statusId = 0;
    var memberId = 0;
    var uniquedId = 0;
    var mbid = '';

    $(document).ready(function () {
        document.getElementById("joinChallenge").style.visibility = "hidden";
        initializeGrid(null);
        createChart();
        getVisitsSummation();
        ValidateLatestChallenge();
 
        //remove time in bday
        if ($("#dob").val() != "") {
            var withTime = $("#dob").val().split(" ")
            var dob = withTime[0];


            $("#dob").val(dob);
        }     
        

        $(window).on("resize", function () {
            kendo.resize($(".chart-wrapper"));
        });

        $("#updateProfile").on('click', function () {

            kendo.alert('This facility is not yet available at the moment.');
            //var FirstName = $("#firstName").val()
            //var LastName = $("#lastName").val()
            //var Mbid = $("#mbId").val()
            //var GenderId = document.getElementById("gender").getAttribute("genderId")
            //var Dob = $("#dob").val();
            //var MobilePhone = $("#mobileNo").val();
            //var ScannerMobile = $("#scannerNo").val();
            //var WorkPhone = $("#workNo").val();
            //var HomePhone = $("#homeNo").val();
            //var AddressLine1 = $("#addressOne").val();
            //var AddressLine2 = $("#addressTwo").val();
            //var City = $("#city").val();
            //var State = $("#state").val();
            //var Country = $("#country").val();
            //var PostalCode = $("#postal").val();
            //var EmergencyContactInfoName = $("#cPerson").val();
            //var EmergencyContactInfoRelationship = $("#cRelationship").val();
            //var EmergencyContactInfoPhone = $("#cMobileNo").val();
            //var EmergencyContactInfoEmail = $("#cEmail").val();


            //$("#Gender").data("kendoComboBox").value(GenderId);
            //$("#FirstName").val(FirstName);
            //$("#LastName").val(LastName);
            //$("#Mbid").val(Mbid);
            ////$("#Gender").val(GenderId);
            //$("#Dob").val(Dob);
            //$("#MobilePhone").val(MobilePhone);
            //$("#ScannerMobile").val(ScannerMobile);
            //$("#WorkPhone").val(WorkPhone);
            //$("#HomePhone").val(HomePhone);
            //$("#AddressLine1").val(AddressLine1);
            //$("#AddressLine2").val(AddressLine2);
            //$("#City").val(City);
            //$("#State").val(State);
            //$("#Country").val(Country);
            //$("#PostalCode").val(PostalCode);
            //$("#EmergencyContactInfoName").val(EmergencyContactInfoName);
            //$("#EmergencyContactInfoRelationship").val(EmergencyContactInfoRelationship);
            //$("#EmergencyContactInfoPhone").val(EmergencyContactInfoPhone);
            //$("#EmergencyContactInfoEmail").val(EmergencyContactInfoEmail);
        });

        $("#joinChallenge").on('click', function () {

            kendo.confirm("Are you sure you want to join the latest challenge?").then(function () {
                $.ajax({
                    type: "POST",
                    url: "/MemberDetails/MemberInformation?handler=CreateChallengeMember",
                    dataType: 'json',
                    headers: {
                        RequestVerificationToken: $('input:hidden[name="__RequestVerificationToken"]').val()
                    },
                    success: function (result) {

                        if (result.success) {
                            document.getElementById("joinChallenge").style.visibility = "hidden";
                            systemAlert(result.message);
                            var gridObject = $("#gridChallenges").data("kendoGrid")
                            gridObject.dataSource.transport.options.read.url = "/MemberDetails/MemberInformation?handler=ReadMemberChallenge";
                            gridObject.dataSource.read();

                        } else {
                            iziToast.info({
                                //title: 'Information',
                                message: 'Sorry the challenge is already started. See you in the next challenge.',
                                position: 'center'
                            });
                        }
                    },
                    error: function () {
                        iziToast.Error({
                            title: 'Success',
                            message: 'Something Wrong. Contact your administrator.',
                            position: 'center'
                        });
                    }
                });
            });
        });

        //$("#submit").on('click', function () {
        //    kendo.ui.progress($("#profile"), true);
        //    var data = {
        //        studioId: studioId,
        //        memberId: memberId,
        //        genderId: $("#Gender").val(),
        //        firstName: $("#FirstName").val(),
        //        lastName: $("#LastName").val(),
        //        mbid: $("#Mbid").val(),
        //        dob: $("#Dob").val(),
        //        mobilePhone: $("#MobilePhone").val(),
        //        scannerMobile: $("#ScannerMobile").val(),
        //        workPhone: $("#WorkPhone").val(),
        //        homePhone: $("#HomePhone").val(),
        //        address1: $("#AddressLine1").val(),
        //        address2: $("#AddressLine2").val(),
        //        city: $("#City").val(),
        //        state: $("#State").val(),
        //        country: $("#Country").val(),
        //        postalCode: $("#PostalCode").val(),
        //        eName: $("#EmergencyContactInfoName").val(),
        //        eRelationship: $("#EmergencyContactInfoRelationship").val(),
        //        ePhone: $("#EmergencyContactInfoPhone").val(),
        //        eEmail: $("#EmergencyContactInfoEmail").val()
        //    };
        //    $.ajax({
        //        type: "POST",
        //        url: "/Members/MemberProfile?handler=UpdateProfile",
        //        data: data,
        //        dataType: 'json',
        //        contentType: "application/x-www-form-urlencoded",
        //        headers: {
        //            RequestVerificationToken: $('input:hidden[name="__RequestVerificationToken"]').val()
        //        },
        //        success: function (result) {
        //            kendo.ui.progress($("#profile"), false);
        //            var dobdateOnly = (result.Dob != null || result.Dob == "") ? removeTime(result.Dob) : result.Dob;
        //            console.log(dobdateOnly);
        //            var dob = dobdateOnly;
        //            var address1 = result.AddressLine1;
        //            var address2 = result.AddressLine2;
        //            var city = result.City;
        //            var state = result.State;
        //            var country = result.Country;
        //            var postal = result.PostalCode;
        //            var cPerson = result.EmergencyContactInfoName;
        //            var cRelationship = result.EmergencyContactInfoRelationship;
        //            var cMobileNo = result.EmergencyContactInfoPhone;
        //            var cEmail = result.EmergencyContactInfoEmail;
        //            $("#firstName").val(result.FirstName);
        //            $("#lastName").val(result.LastName);
        //            $("#mbId").val(result.Mbid);
        //            $("#gender").val(result.Gender).attr('genderId', result.GenderId);;
        //            $("#dob").val(dob);
        //            $("#mobileNo").val(result.MobilePhone);
        //            $("#scannerNo").val(result.ScannerMobile);
        //            $("#workNo").val(result.WorkPhone);
        //            $("#homeNo").val(result.HomePhone);
        //            $("#addressOne").val(address1);
        //            $("#addressTwo").val(address2);
        //            $("#city").val(city);
        //            $("#state").val(state);
        //            $("#country").val(country);
        //            $("#postal").val(postal);
        //            $("#cPerson").val(cPerson);
        //            $("#cRelationship").val(cRelationship);
        //            $("#cMobileNo").val(cMobileNo);
        //            $("#cEmail").val(cEmail);
        //            //$("#MemberList").data("kendoListView").dataSource.read();
        //            iziToast.success({
        //                title: 'Success',
        //                message: result.Message,
        //            });
        //        },
        //        error: function () {
        //            iziToast.error({
        //                title: 'Error',
        //                message: 'Unable to update record. Please contact your system administrator.'
        //            });
        //        }
        //    });
        //});
    });

       
    function removeTime(date) {
        var date = new Date(date);
        var dateString = [
            ("0" + date.getDate()).slice(-2),
            ("0" + (date.getMonth() + 1)).slice(-2),
            date.getFullYear()
        ].join("-");
        return dateString;
    }
        
    function systemAlert(content) {
        $("<div></div>").kendoAlert({
            title: "Information",
            content: content,
            size: "small"
        }).data("kendoAlert").open();
    }

    function ValidateLatestChallenge() {
        $.ajax({
            type: "POST",
            url: "/MemberDetails/MemberInformation?handler=CheckChallengeMember",
            dataType: 'json',
            headers: {
                RequestVerificationToken: $('input:hidden[name="__RequestVerificationToken"]').val()
            },
            success: function (result) {
                console.log(result);
                if (result) {
                    document.getElementById("joinChallenge").style.visibility = "visible";
                    //$("#joinChallenge").hide();
                } else {
                    //$("#joinChallenge").show();
                }
            },
            error: function () {
                kendo.alert('Something Wrong. Contact your administrator.');
            }
        });
    }

    function error_handler(e) {
        if (e.errors) {
            var message = "";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });

            iziToast.error({
                title: 'Error',
                message: message,
                position: 'center'
            });
        }
    }

    function onEditPaymentMethod() {
        var paymentMethod = $('#PaymentMethodTypeId').val();
        var x = document.getElementById("paidByOther");
        if (paymentMethod != 3 || paymentMethod == '') {
            x.style.display = "none";

        } else {
            x.style.display = "block";
        }
    }

    function onChangePaymentMethod() {
        var paymentMethod = $('#PaymentMethodTypeId').val();
        var x = document.getElementById("paidByOther");
        if (paymentMethod == 3) {
            x.style.display = "block";
        } else {
            x.style.display = "none";
        }
    }

    function createChart() {
        $.ajax({
            type: "POST",
            url: "/MemberDetails/MemberInformation?handler=ReadScanChart",
            dataType: 'json',
            contentType: "application/x-www-form-urlencoded",
            headers: {
                RequestVerificationToken: $('input:hidden[name="__RequestVerificationToken"]').val()
            },
            success: function (result) {
                $("#chart").kendoChart({
                    legend: {
                        position: "top"
                    },
                    chartArea: {
                        background: "transparent",
                        height: 300
                    },
                    seriesDefaults: {
                        type: "line",
                        style: "smooth"
                    },
                    series: [{
                        name: "InBodyScore",
                        data: result.InBodyScore
                    }, {
                        name: "Weight",
                        data: result.Weight
                    }, {
                        name: "Percent Body Fat",
                        data: result.Pbf
                    }, {
                        name: "Skeletal Muscle Mass",
                        data: result.Smm
                    }, {
                        name: "Visceral Fat Level",
                        data: result.Vfl
                    }],
                    valueAxis: {
                        labels: {
                            format: "{0}%"
                        },
                        line: {
                            visible: false
                        },
                        axisCrossingValue: -10
                    },
                    categoryAxis: {
                        categories: result.TestDateTime,
                        majorGridLines: {
                            visible: false
                        },
                        labels: {
                            rotation: "auto"
                        }
                    },
                    tooltip: {
                        visible: true,
                        format: "{0}%",
                        template: "#= series.name #: #= value #"
                    }
                });

            },
            error: function () {
                iziToast.error({
                    title: 'Error',
                    message: 'Unable to update record. Please contact your system administrator.'
                });
            }
        });
    }

    function onErrorTab(e) {
        kendoConsole.error("Loading failed with " + e.xhr.statusText + " " + e.xhr.status);
    }

    function forgeryToken() {
        return kendo.antiForgeryTokens();
    }

    function removeTime(date) {
        var date = new Date(date);
        var dateString = [
            ("0" + date.getDate()).slice(-2),
            ("0" + (date.getMonth() + 1)).slice(-2),
            date.getFullYear()
        ].join("-");
        return dateString;
    }

    function initializeGrid(options) {
        if (options === null || options === undefined) {
            options = {
                size: 0.55,
                gridContentCss: ".k-grid-content",
                gridLockedContentCss: ".k-grid-content-locked",
                gridsToResize: []
            };
        }

        var windowHeight = $(window).height() * options.size;

        if (options.gridsToResize !== null && options.gridsToResize.length > 0) {
            options.gridsToResize.forEach(function (item) {
                var gridContent = $('#' + item + ' > ' + options.gridContentCss);


                var lockedContent = $('#' + item + ' > ' + options.gridLockedContentCss);


                console.log(gridContent, lockedContent);

                gridContent.height(windowHeight);

                if (lockedContent !== null && lockedContent !== undefined) {
                    lockedContent.height(windowHeight);

                }
            });
        }
        else {
            var gridContent = $(options.gridContentCss);
            var lockedContent = $(options.gridLockedContentCss);

            gridContent.height(windowHeight);

            if (lockedContent !== null && lockedContent !== undefined) {
                lockedContent.height(windowHeight);

            }
        }
    }

    function addCommas(nStr) {
        nStr += '';
        var x = nStr.split('.');
        var x1 = x[0];
        var x2 = x.length > 1 ? '.' + x[1] : '';
        var rgx = /(\d+)(\d{3})/;
        while (rgx.test(x1)) {
            x1 = x1.replace(rgx, '$1' + ',' + '$2');
        }
        return x1 + x2;
    }

    function onDataBound(e) {
        //position the add new button to the left.
        $(".k-grid-toolbar").addClass("text-left");
    }

    function onGridSave(e) {
        e.sender.one("dataBound", function () {
            e.sender.dataSource.read();
        });
    }

    function getMemberInfo() {

        $.ajax({
            type: "POST",
            url: "/MemberDetails/MemberInformation?handler=ReadMemberInfo",
            dataType: 'json',
            headers: {
                RequestVerificationToken: $('input:hidden[name="__RequestVerificationToken"]').val()
            },
            success: function (result) {
                console.log(result)
            },
            error: function () {
                iziToast.error({
                    title: 'Error',
                    message: 'Unable to update record. Please contact your system administrator.'
                });
            }
        });
    }

    function getVisitsSummation() {
        $.ajax({
            type: "POST",
            url: "/MemberDetails/MemberInformation?handler=ReadClientVisitsSummations",
            dataType: 'json',
            headers: {
                RequestVerificationToken: $('input:hidden[name="__RequestVerificationToken"]').val()
            },
            success: function (result) {
                console.log(result.totals);

                $.each(result.rewards, function (index) {
                    var visitCount = result.rewards[index].VisitCount;
                    var memberAchievementId = result.rewards[index].MemberAchievementRewardId;
                    var isClaimed = result.rewards[index].IsClaimed;
                    $("#achievements").append('<div class="col-md-8 col-sm-8 col-xs-8 container achievement"><div class="col-md-9"><img src="/images/badge1.png" /><div class="centered">' + visitCount + '</div></div><div class="col-md-3"></div></div>');                    
                });

                $("#absences").val(result.totals.Absences);
                $("#signedIn").val(result.totals.SignedIn);
                $("#lateCancelled").val(result.totals.LateCancelled);
                $("#totalVisits").val(result.totals.TotalVisits);
            },
            error: function () {
                iziToast.error({
                    title: 'Error',
                    message: 'Unable to update record. Please contact your system administrator.'
                });
            }
        });
    }

    function onGroupExpand(e) {
        var ChallengeMemberId = e.sender.dataItem(e.masterRow).ChallengeMemberId
        var data = {
            ChallengeMemberId: ChallengeMemberId
        };

        $.ajax({
            type: "POST",
            url: "/MemberDetails/MemberInformation?handler=ReadImages",
            data: data,
            dataType: 'json',
            contentType: "application/x-www-form-urlencoded",
            headers: {
                RequestVerificationToken: $('input:hidden[name="__RequestVerificationToken"]').val()
            },
            success: function (result) {
                if (result != null) {
                    $("#before-front-" + ChallengeMemberId).attr("src", result.BeforeFrontImage);
                    $("#before-side-" + ChallengeMemberId).attr("src", result.BeforeSideImage);
                    $("#before-back-" + ChallengeMemberId).attr("src", result.BeforeBackImage);
                    $("#after-front-" + ChallengeMemberId).attr("src", result.AfterFrontImage);
                    $("#after-side-" + ChallengeMemberId).attr("src", result.AfterSideImage);
                    $("#after-back-" + ChallengeMemberId).attr("src", result.AfterBackImage);
                }
            },
            error: function () {
                iziToast.error({
                    title: 'Error',
                    message: 'Unable to update record. Please contact your system administrator.'
                });
            }
        });
    }

    //function getTotalPurchases() {
    //    $.ajax({
    //        type: "POST",
    //        url: "/MemberDetails/MemberInformation?handler=ReadClientTotalAmountPaid",
    //        dataType: 'json',
    //        headers: {
    //            RequestVerificationToken: $('input:hidden[name="__RequestVerificationToken"]').val()
    //        },
    //        success: function (result) {
    //            $("#totalAmountPaid").val('$ ' + addCommas(result));
    //        },
    //        error: function () {
    //            iziToast.error({
    //                title: 'Error',
    //                message: 'Unable to update record. Please contact your system administrator.'
    //            });
    //        }
    //    });
    //}


</script>

<style>
    /*badge*/
    .container {
        position: relative;
        font-family: Arial;
        text-align: center;
    }

    .centered {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        color: #fff;
    }
</style>
