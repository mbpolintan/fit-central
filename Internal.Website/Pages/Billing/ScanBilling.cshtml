@page
@model Internal.Website.Pages.Billing.ScanBillingModel
@using DataAccess.ViewModels
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
@{ ViewData["Title"] = "Scan Billing";}

<div class="bg-light content-maint mh-100 min-vh-100">
    <div class="row mh-100 min-vh-100">       
        <div class="col mh-100 min-vh-100">
            <div class="col text-left">
                <h4 class="k-primary">
                    <small class="k-text-primary">@ViewData["Title"]</small>
                </h4>
            </div>
            <div class="col-md-5 text-left" style="padding:0.5em">
                @Html.Label("Studios: ")
                @(Html.Kendo().DropDownList()
            .Name("Studio")
            .DataTextField("StudioName")
            .DataValueField("StudioId")
            .Events(e => e.Change("onChangeStudio"))
            .BindTo((System.Collections.IEnumerable)ViewData["Studios"])
            .HtmlAttributes(new { style = "width:50%;" }))
            </div>
            @(Html.Kendo().PanelBar()
                .Name("panelbar")
                .ExpandMode(PanelBarExpandMode.Multiple)
                .Items(panelbar =>
                {
                    panelbar.Add().Text("Billable Scans")
                    .Expanded(true)
                    .Content(@<div class="col-md-12">
                            @Html.AntiForgeryToken()
                            @(Html.Kendo().Grid<ScanForBillingViewModel>()
                                .Name("gridScans")
                                .Columns(columns =>
                                {
                                    columns.Select().Width(50).HtmlAttributes(new { @class = "text-center" }).HeaderHtmlAttributes(new { style = "text-align:center" });
                                    columns.Bound(e => e.DisplayName).Title("Name").Filterable(false).Editable("false")
                                    .HeaderHtmlAttributes(new { style = "text-align:center" });
                                    columns.Bound(e => e.PaymentType).Width("10%").Title("Payment Type").Filterable(false).Editable("false")
                                    .HeaderHtmlAttributes(new { style = "text-align:center" }).HtmlAttributes(new { style = "text-align:center" });
                                    columns.Bound(e => e.ChallengeNo).Title("Scan Type")
                                    .ClientTemplate("#=ChallengeNo != 0 ? 'Challenge Scan' : 'Individual Scan' #")
                                    .HeaderHtmlAttributes(new { style = "text-align:center" }).HtmlAttributes(new { style = "text-align:center" });
                                    columns.Bound(e => e.ChallengeNo).Width("10%").Title("Challenge No.").Filterable(false).Editable("false")
                                    .ClientTemplate("#=ChallengeNo != 0 ? ChallengeNo : 'N/A' #")
                                    .HeaderHtmlAttributes(new { style = "text-align:center" }).HtmlAttributes(new { style = "text-align:center" });
                                    columns.Bound(e => e.ProductName).Width("25%").Title("Product Name").Filterable(false).EditorTemplateName("CustomProductEditor")
                                    .HeaderHtmlAttributes(new { style = "text-align:center" }).HtmlAttributes(new { style = "text-align:center" });
                                    columns.Bound(e => e.Quantity).Width("5%").Title("Quantity").Filterable(false).Editable("false")
                                    .HeaderHtmlAttributes(new { style = "text-align:center" }).HtmlAttributes(new { style = "text-align:center" });
                                    columns.Bound(e => e.BillableAmount).Width("10%").Format("{0:c}").Title("Amount").Filterable(false).Editable("false")
                                    .HeaderHtmlAttributes(new { style = "text-align:center" }).HtmlAttributes(new { style = "text-align:right" });
                                })
                                .Filterable(filterable => filterable.Extra(false).Operators(operators => operators.ForString(str => str.Clear()
                                    .StartsWith("Starts with").IsEqualTo("Is equal to").IsNotEqualTo("Is not equal to"))))
                                .Mobile().Sortable().Scrollable().Navigatable()
                                .Events(ev => ev.DetailExpand("onGroupExpand"))
                                .HtmlAttributes(new { style = "height:auto; width:auto; font-size:13px;"})
                                .Events(events => events.DataBound("onDataBound"))
                                .ToolBar(tb =>
                                {
                                    tb.Custom().Text("&nbsp;Make Payment").IconClass("fas fa-credit-card").HtmlAttributes(new { id = "billCCDD" });
                                    tb.Custom().Text("Cash").IconClass("k-icon k-i-currency").HtmlAttributes(new { id = "payCash" });
                                    tb.Custom().Text("Already Paid").IconClass("k-icon k-i-check-outline").HtmlAttributes(new { id = "alreadyPaid" });
                                    tb.Custom().Text("Ignore").IconClass("k-icon k-i-close-outline").HtmlAttributes(new { id = "ignoreBilling" });
                                    tb.Search();
                                })
                                .Pageable(pageable => pageable.Refresh(true).PageSizes(true).ButtonCount(5))
                                .Search(search => search.Field(f => f.DisplayName))
                                .ClientDetailTemplateId("templateScan")
                                .DataSource(dataSource => dataSource.Ajax().PageSize(20)
                                    .Read(r => r.Url("").Data("forgeryToken"))
                                    .Model(m =>{
                                        m.Id(id => id.MemberId);
                                        m.Field(f => f.ProductName);
                                    })))
                            </div>);                    
                    panelbar.Add().Text("Transaction Logs")
                    .Expanded(true)
                    .Content(@<div class="col-md-12">
                            @(Html.Kendo().Grid<PaymentTransactionLogViewModel>()
                                .Name("grdTransactionLog")
                                .Columns(columns =>
                                {
                                    columns.Bound(c => c.Gateway).Width("5%").Editable("false").Filterable(false)
                                    .HeaderHtmlAttributes(new { style = "text-align:center" });
                                    columns.Bound(c => c.TransactionDate).Title("Transaction Date").Width("10%").Format("{0:d}").Editable("false").Filterable(false)
                                    .HeaderHtmlAttributes(new { style = "text-align:center" }).HtmlAttributes(new { style = "text-align:center" });
                                    columns.Bound(c => c.ProcessedByDisplayName).Title("Processed By").Width("15%").Editable("false").Filterable(false)
                                    .HeaderHtmlAttributes(new { style = "text-align:center" });
                                    columns.Bound(c => c.DisplayName).Title("Member").Width("10%").Filterable(false).Editable("false")
                                    .HeaderHtmlAttributes(new { style = "text-align:center" });
                                    columns.Bound(c => c.PaymentMethodType).Title("Payment Method").Width("10%").Filterable(false).Editable("false")
                                    .HeaderHtmlAttributes(new { style = "text-align:center" }).HtmlAttributes(new { style = "text-align:center" });
                                    columns.Bound(c => c.Amount).Width("5%").Format("{0:c}").Title("Amount").Filterable(false).Editable("false")
                                    .HeaderHtmlAttributes(new { style = "text-align:center" }).HtmlAttributes(new { style = "text-align:right" });
                                    columns.Bound(c => c.Status).HeaderHtmlAttributes(new { style = "text-align:center" }).HtmlAttributes(new { style = "text-align:center" })
                                    .ClientTemplate("#=Status ? 'Completed' : 'Failed' #").Width("8%").Filterable(false).Editable("false");
                                    columns.Bound(c => c.StatusDescription).Title("Status Description").Width("25%").Filterable(false).Editable("false")
                                    .HeaderHtmlAttributes(new { style = "text-align:center" });
                                }).HtmlAttributes(new { @class = "text-center" })
                                .Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("CustomReconcileEditor").Window(w => w.Title("Reconcile Transaction")))
                                .Filterable(filterable => filterable.Extra(false)
                                    .Operators(operators => operators.ForString(str => str.Clear().StartsWith("Starts with").IsEqualTo("Is equal to").IsNotEqualTo("Is not equal to"))))
                                .Mobile().Sortable().Scrollable().Navigatable()
                                .Pageable(pageable => pageable.Refresh(true).PageSizes(true).ButtonCount(5))
                                .HtmlAttributes(new { style = "height:auto; width:auto; font-size:13px;" })
                                .ToolBar(tb => tb.Search())
                                .Search(search => search.Field(f => f.DisplayName))
                                .DataSource(ds => ds.Ajax()
                                    .Events(events => events.Error("error_handler"))
                                    .PageSize(20)
                                    .Read(r => r.Url("").Data("forgeryToken"))
                                    .Update(u => u.Url("/Billing/ScanBilling?handler=UpdatePaymentTransactionLog").Data("forgeryToken"))
                                    .Model(m => m.Id(id => id.PaymentTransactionLogId))))
                            </div>);
                }))
        </div>
    </div>
</div>

<script id="templateScan" type="text/kendo-tmpl">
    @(Html.Kendo().Grid<ScansBillableViewModel>()
    .Name("gridItems_#=MemberId#")
    .Columns(columns =>
    {
        columns.Bound(o => o.TestDateTime).Format("{0:d}").Width("90%")
        .HtmlAttributes(new { @class = "text-center" }).HeaderHtmlAttributes(new { style = "text-align:center" });
    })
    .Scrollable(sc => sc.Endless(true))    
    .HtmlAttributes(new { style = "width:100%; font-size:13px; padding:0" })
    .Sortable()
    .DataSource(dataSource => dataSource
        .Ajax()

            .Model(model => model.Id(p => p.ScanId))
        .Read(r => r.Url("/Billing/ScanBilling?handler=ReadScans&memberId=#=MemberId#&scanType=#=ScanType#&studioId=#=StudioId#&challengeNo=#=ChallengeNo#").Data("forgeryToken")))
    .ToClientTemplate())   
</script>

<script>
    var studioId = 0;
    var Ids = '';    
    var ScanId = 0;
    var ChallengeScanIds = '';
    var StartScanId = 0;
    var MidScanId = 0;
    var EndScanId = 0;
    var statusId = 0;
    var category = '';
    var memberId = 0;
    var selectedItem;

    //var recon = 0;
    //var reconcile = false;
    //var isReconcile = true;
    //var d = new Date();
    //var dateTo = d.getDate() + "/" + (d.getMonth() + 1) + "/" + d.getFullYear();
    //var dateFrom = d.getDate() + "/" + d.getMonth() + "/" + d.getFullYear();
   
    var KendoWindowManager = {
        InitKendoWindow: function () {
            $('#BillScan').kendoWindow({
                title: "Update Billing Status",
                width: "20%",
                modal: true,
                actions: ["Close"],
                visible: false
            });
        }
    }

    $(document).ready(function () {

        KendoWindowManager.InitKendoWindow();
        //$("#dateFrom").val(dateFrom);
        //$("#dateTo").val(dateTo);

        var studioName = '@Model.SelectedStudio.StudioName';
            studioId = '@Model.SelectedStudio.StudioId';

        var studiolist = $("#Studio").data("kendoDropDownList");
            studiolist.text(studioName);
            studiolist.value(studioId);
            studiolist.trigger("change"); 

        $('#alreadyPaid').on('click', function () {

            var grid = $("#gridScans").data("kendoGrid");
            kendo.ui.progress(grid.element, true);
            var rows = grid.select();
            var processedTransaction = 0;
            var selectedRow = rows.length;
            rows.each(function (index, row) {

                selectedItem = grid.dataItem(row);               
                var data = {
                    memberid: selectedItem.MemberId,
                    scantype: selectedItem.ScanType,
                    studioid: selectedItem.StudioId,
                    productId: selectedItem.ProductId,
                    amount: selectedItem.BillableAmount,
                    quantity: selectedItem.Quantity,
                    challengeNo: selectedItem.ChallengeNo,
                    challengeMemberId: selectedItem.ChallengeMemberId,
                };

                $.ajax({
                    type: "POST",
                    url: "/Billing/ScanBilling?handler=AlreadyPaid",
                    data: data,
                    dataType: 'json',
                    headers: {
                        RequestVerificationToken: $('input:hidden[name="__RequestVerificationToken"]').val()
                    },
                    success: function (result) {

                        if (result.success)
                            processedTransaction = processedTransaction + 1;

                        if (selectedRow == processedTransaction) {
                            kendo.ui.progress(grid.element, false);
                            var message = processedTransaction > 1 ? " Records successfully updated billing status to paid." : " Record successfully ignored for paid.";
                            kendo.alert(processedTransaction + message + '/r' + result.transactionMessage);
                            loadScanBilling(studioId);
                            
                        }
                    },
                    error: function (e) {
                        kendo.alert('Something Wrong. Contact your administrator.');
                        kendo.ui.progress(grid.element, false);
                    }
                });

            });
        });

        $('#ignoreBilling').on('click', function () {

            kendo.confirm("Are you sure that you want to proceed?").then(function () {
            var grid = $("#gridScans").data("kendoGrid");
            kendo.ui.progress(grid.element, true);
            var rows = grid.select();
            var processedTransaction = 0;
            var selectedRow = rows.length;
                rows.each(function (index, row) {

                    selectedItem = grid.dataItem(row);  
                    var data = {
                        memberId : selectedItem.MemberId,
                        scanType : selectedItem.ScanType,
                        studioId : selectedItem.StudioId
                    };

                    $.ajax({
                        type: "POST",
                        url: "/Billing/ScanBilling?handler=IgnoreBilling",
                        data: data,
                        dataType: 'json',
                        headers: {
                            RequestVerificationToken: $('input:hidden[name="__RequestVerificationToken"]').val()
                        },
                        success: function (result) {

                            if (result.success)
                                processedTransaction = processedTransaction + 1;

                            if (selectedRow == processedTransaction) {
                                kendo.ui.progress(grid.element, false);
                                var message = processedTransaction > 1 ? " Records successfully updated billing status to ignored." : " Record successfully updated billing status to ignored.";
                                kendo.alert(processedTransaction + message);
                                loadScanBilling(studioId);                                
                            }
                        },
                        error: function (e) {
                            kendo.alert('Something Wrong. Contact your administrator.');
                            kendo.ui.progress(grid.element, false);
                        }
                    });

                });
            });
        });

        $('#payCash').on('click', function () {
            kendo.confirm("Are you sure that you want to proceed?").then(function () {
                var grid = $("#gridScans").data("kendoGrid");
                kendo.ui.progress(grid.element, true);
                var rows = grid.select();
                var processedTransaction = 0;
                var selectedRow = rows.length;
                rows.each(function (index, row) {

                    selectedItem = grid.dataItem(row); 
                    
                    var data = {
                        memberid : selectedItem.MemberId,
                        scantype : selectedItem.ScanType,
                        studioid : selectedItem.StudioId,
                        productId : selectedItem.ProductId,
                        amount : selectedItem.BillableAmount,
                        quantity: selectedItem.Quantity,
                        challengeNo: selectedItem.ChallengeNo,
                        challengeMemberId: selectedItem.ChallengeMemberId,
                    };
                    $.ajax({
                        type: "POST",
                        url: "/Billing/ScanBilling?handler=CashBilling",
                        data: data,
                        dataType: 'json',
                        headers: {
                            RequestVerificationToken: $('input:hidden[name="__RequestVerificationToken"]').val()
                        },
                        success: function (result) {                   

                            if (result.success)
                                processedTransaction = processedTransaction + 1;

                            if (selectedRow == processedTransaction) {
                                kendo.ui.progress(grid.element, false);
                                var message = processedTransaction > 1 ? " Records successfully updated billing status to paid." : " Record successfully updated billing status to paid.";
                                kendo.alert(processedTransaction + message);
                                loadScanBilling(studioId);                                   
                            }
                        },
                        error: function (e) {
                            kendo.alert('something wrong. contact your administrator.');
                            kendo.ui.progress(grid.element, false);
                        }
                    });

                });
            });
        });

        $('#billCCDD').on('click', function () {
           
            kendo.confirm("Are you sure that you want to proceed?").then(function () {
                
                var grid = $("#gridScans").data("kendoGrid"); 
                kendo.ui.progress(grid.element, true);
                var rows = grid.select();
                var processedTransaction = 0;
                var selectedRow = rows.length;
                rows.each(function (index, row) {                    
                    selectedItem = grid.dataItem(row);
                    if (selectedItem.PaymentType != "Others") {    
                       
                        var data = {
                            memberId: selectedItem.MemberId,
                            scanType: selectedItem.ScanType,
                            studioId: selectedItem.StudioId,
                            mbProductId: selectedItem.MBProductId,
                            productId: selectedItem.ProductId,
                            amount: selectedItem.BillableAmount,
                            quantity: selectedItem.Quantity,                           
                            siteId: selectedItem.SiteId,
                            challengeNo: selectedItem.ChallengeNo,
                            challengeMemberId: selectedItem.ChallengeMemberId,
                        }; 


                        $.ajax({
                            type: "POST",
                            url: "/Billing/ScanBilling?handler=CardBilling",
                            data: data,
                            dataType: 'json',
                            headers: {
                                RequestVerificationToken: $('input:hidden[name="__RequestVerificationToken"]').val()
                            },
                            success: function (result) {

                                if (result.success) {
                                    processedTransaction = processedTransaction + 1;
                                } else {
                                    kendo.alert("Failed to transact billing for " + result.memberName);
                                    selectedRow = selectedRow - 1;
                                }
                                    

                                if (selectedRow == processedTransaction) {
                                    kendo.ui.progress(grid.element, false);
                                    var message = processedTransaction > 1 ? " Records successfully transacted to Mindbody." : " Record successfully transacted to Mindbody.";
                                    kendo.alert(processedTransaction + message);
                                    loadScanBilling(studioId);
                                    //grid.dataSource.transport.options.read.url = "/Billing/ScanBilling?handler=ReadScanBilling&studioId=" + studioId;
                                    //grid.dataSource.read();
                                }
                            },
                            error: function (e) {
                                kendo.alert('something wrong. contact your administrator.');
                                kendo.ui.progress(grid.element, false);
                            }
                        });                       

                    } else {
                        selectedRow = selectedRow - 1;
                        kendo.alert(selectedItem.DisplayName + " Payment Type is invalid!");                       
                        kendo.ui.progress(grid.element, false);
                    }
                    
                });
            });
        });

        //$('body').on('click','#reconcile', function (e) {
        //    e.preventDefault();
        //    kendo.confirm("Are you sure that you want to proceed?").then(function (e) {   
        //        console.log(isReconcile);
        //        var data = {
        //            paymentIds : Ids,
        //            recon: recon                      
        //        };
        //        $.ajax({
        //            type: "POST",
        //            url: "/Billing/ScanBilling?handler=UpdatePaymentReconciliation",
        //            data: data,
        //            dataType: 'json',
        //            headers: {
        //                RequestVerificationToken: $('input:hidden[name="__RequestVerificationToken"]').val()
        //            },
        //            success: function (result) {
        //                var dropdownlist = $("#Studio").data("kendoDropDownList");
        //                studioId = dropdownlist.value();
        //                console.log(result);
        //                loadPaymentReciliation(studioId, dateFrom, dateTo, result)                           
        //            },
        //            error: function (e) {
        //                kendo.alert('Something Wrong. Contact your administrator.');
        //            }
        //        });
        //    });
        //});

     });

    function onGroupExpand(e) {
        //alert('asdas');
        //var gridId = e.sender.attachedGrid.element.attr('id')
        //console.log(gridId);
    }

    function error_handler(e) {
        if (e.errors) {
            var message = "";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });


            iziToast.error({
                title: 'Error',
                message: message,
                position: 'center'
            });

            loadScanBilling(studioId)
            loadPaymentTransactionLog(studioId)            
        }
    }

    function onDataBound(e) {
        //position the add new button to the left.
        $(".k-grid-toolbar").addClass("text-left");
    }     

    function forgeryToken() {
        return kendo.antiForgeryTokens();
    }

    function onChangeStudio(e) {
        var dropdownlist = $("#Studio").data("kendoDropDownList");
        studioId = dropdownlist.value();
        loadScanBilling(studioId);
        loadPaymentTransactionLog(studioId);

        //dateFrom = $("#dateFrom").val();
        //dateTo = $("#dateTo").val();
        //recon = $("#Reconcile").data("kendoDropDownList").value();
        //if (recon > 0) {
        //    isReconcile = false;
        //    reconcile = true;
        //}        
        //loadPaymentReciliation(studioId, dateFrom, dateTo, reconcile);     
    }

    function loadScanBilling(studioId) {
        var gridObject = $("#gridScans").data("kendoGrid")
        gridObject.dataSource.transport.options.read.url = "/Billing/ScanBilling?handler=ReadScanBilling&studioId=" + studioId;
        gridObject.dataSource.read();
    }
    function loadPaymentTransactionLog(studioId) {
        var gridObject = $("#grdTransactionLog").data("kendoGrid")
        gridObject.dataSource.transport.options.read.url = "/Billing/ScanBilling?handler=ReadPaymentTransactionLog&studioId=" + studioId;
        gridObject.dataSource.read();
    }


    //function onChangeReconcile(e) {
    //    Ids = this.selectedKeyNames().join(",");
    //}
    //function onChangeReconcileStatus(e) {
    //    //var dropdownlist = $("#Studio").data("kendoDropDownList");
    //    //studioId = dropdownlist.value();

    //    dateFrom = $("#dateFrom").val();
    //    dateTo = $("#dateTo").val();
    //    recon = $("#Reconcile").data("kendoDropDownList").value();



    //    if (recon > 0) {
    //        isReconcile = false;
    //        reconcile = true;
    //        $("#reconcile").text('Unreconciled')
    //    } else {

    //        $("#reconcile").text('Reconcile')
    //    }


    //    $("#grdPaymentsReconciliation").data("kendoGrid").dataSource.data([]);

    //}
    //function onClickGenerate() {
    //    var dropdownlist = $("#Studio").data("kendoDropDownList");
    //    studioId = dropdownlist.value();

    //    dateFrom = $("#dateFrom").val();
    //    dateTo = $("#dateTo").val();
    //    reconcile = $("#Reconcile").data("kendoDropDownList").value();
    //    loadPaymentReciliation(studioId, dateFrom, dateTo, reconcile);
    //}
     //function onExportToExcel(e) {
    //    var d = new Date();
    //    var dateToday = d.getDate() + "/" + (d.getMonth() + 1) + "/" + d.getFullYear();
    //    var value = (recon > 0) ? "Reconciled Payments" : "Unreconciled Payments";

    //    e.workbook.fileName = dateToday + "-PaymentReconciliation.xlsx";
    //    var sheet = e.workbook.sheets[0];
    //    var columns = sheet.columns;
    //    columns.forEach(function (column) {
    //        // also delete the width if it is set
    //        delete column.width;
    //        column.autoWidth = true;
    //    });

    //    sheet.frozenRows = 2;
    //    sheet.mergedCells = ["A1:J1"];
    //    sheet.name = "Payments";

    //    var myHeaders = [{
    //        value: value,
    //        fontSize: 25,
    //        textAlign: "left",        
    //        background: "#ff3700",
    //        color: "#ffffff"
    //    }];

    //    sheet.rows.splice(0, 0, { cells: myHeaders, type: "header", height: 50 });
    //}

    //function loadPaymentReciliation(studioId, dateFrom, dateTo, reconcile) {      
    //    var gridObject = $("#grdPaymentsReconciliation").data("kendoGrid")
    //    gridObject.dataSource.transport.options.read.url = "/Billing/ScanBilling?handler=ReadPaymentReconciliation&studioId=" + studioId + "&dateFrom=" + dateFrom + "&dateTo=" + dateTo + "&isReconciled=" + reconcile;
    //    gridObject.dataSource.read();
    //}
      //function onDataBoundPayment(e) {
    //    var grid = e.sender;
    //    var rows = grid.tbody.find("[role='row']");       

    //    rows.unbind("click");
    //    rows.on("click", onClick)
    //};

    //function onClick(e) {

    //    if ($(e.target).hasClass("k-checkbox-label")) {
    //        return;
    //    }

    //    var row = $(e.target).closest("tr");
    //    var checkbox = $(row).find(".reconcile");

    //    checkbox.click();
    //    var isReconciled = checkbox[0]["checked"];
    //    onChangeReconcile(e)


    //    //var data = {
    //    //    isReconciled: isReconciled,
    //    //    paymentId: paymentId            
    //    //};

    //    //$.ajax({
    //    //    type: "POST",
    //    //    url: "/Billing/ScanBilling?handler=UpdatePaymentReconciliation",
    //    //    data: data,
    //    //    dataType: 'json',
    //    //    headers: {
    //    //        RequestVerificationToken: $('input:hidden[name="__RequestVerificationToken"]').val()
    //    //    },
    //    //    success: function (result) {

    //    //        if (result.success)
    //    //            processedTransaction = processedTransaction + 1;

    //    //        if (selectedRow == processedTransaction) {
    //    //            kendo.ui.progress(grid.element, false);
    //    //            var message = processedTransaction > 1 ? " Records successfully updated billing status to paid." : " Record successfully ignored for paid.";
    //    //            kendo.alert(processedTransaction + message + '/r' + result.transactionMessage);
    //    //            loadScanBilling(studioId);
    //    //            //grid.dataSource.transport.options.read.url = "/Billing/ScanBilling?handler=ReadScanBilling&studioId=" + studioId;
    //    //            //grid.dataSource.read();
    //    //        }
    //    //    },
    //    //    error: function (e) {
    //    //        kendo.alert('Something Wrong. Contact your administrator.');
    //    //        kendo.ui.progress(grid.element, false);
    //    //    }
    //    //});

    //};

    //function removeTime(date) {
    //    var date = new Date(date);
    //    var dateString = [
    //        ("0" + date.getDate()).slice(-2),
    //        ("0" + (date.getMonth() + 1)).slice(-2),
    //        date.getFullYear()
    //    ].join("-");
    //    return dateString;
    //}       

</script>
