@page
@model Internal.Website.MemberReportModel
@using DataAccess.ViewModels
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
@{ ViewData["Title"] = "Members Report"; }
<div class="bg-light content-maint mh-100 min-vh-100">  
    <div class="row mh-100 min-vh-100">
        <div class="col mh-100 min-vh-100">
            <div class="col text-left">
                <h4 class="k-primary">
                    <small class="k-text-primary">@ViewData["Title"]</small>
                </h4>
            </div>
            <div class="col-md-6 text-left" style="padding:0.5em">
                @Html.Label("Studios: ")
                @(Html.Kendo().DropDownList()
                    .Name("Studio")
                    .DataTextField("StudioName")
                    .DataValueField("StudioId")
                    .Events(e => e.Change("onChangeStudio"))
                    .BindTo((System.Collections.IEnumerable)ViewData["Studios"])
                    .HtmlAttributes(new { style = "width:30%;" }))
                @Html.Label("Status: ")
                @(Html.Kendo().DropDownList()
                    .Name("Status")
                    .DataTextField("Status")
                    .DataValueField("MemberStatusId")
                    .Events(e => e.Change("onChangeStatus").DataBound("onStatusDataBound"))
                    .BindTo((System.Collections.IEnumerable)ViewData["status"])
                    .HtmlAttributes(new { style = "width:30%;" }))
            </div>

            @Html.AntiForgeryToken()
            @(Html.Kendo().Grid<MemberViewModel>()
                .Name("grdMembers")
                .Columns(columns =>
                {
                    columns.Bound(c => c.DisplayName).Width("15%").Title("Name").Filterable(false)
                    .HtmlAttributes(new { style = "text-transform:capitalize;" }).HeaderHtmlAttributes(new { style = "text-align:center" })
                    .ClientTemplate(@"<div class='member-photo' style='background-image: url(" + @Url.Content("#=ImageURL#") + ");'></div>&nbsp;&nbsp;<div class='member-name'>#: DisplayName #</div>");
                    columns.Bound(c => c.Email).Filterable(false).HeaderHtmlAttributes(new { style = "text-align:center" });
                    columns.Bound(c => c.Gender).HeaderHtmlAttributes(new { style = "text-align:center" });
                    columns.Bound(c => c.Dob).Filterable(false).Format("{0:d}")
                    .HeaderHtmlAttributes(new { style = "text-align:center" }).HtmlAttributes(new { style = "text-align:center" });
                    columns.Bound(c => c.AddressLine1).Filterable(false)
                    .HeaderHtmlAttributes(new { style = "text-align:center" });
                    columns.Bound(c => c.City)
                    .HeaderHtmlAttributes(new { style = "text-align:center" });
                    columns.Bound(c => c.State)
                    .HeaderHtmlAttributes(new { style = "text-align:center" });
                    columns.Bound(c => c.Country)
                    .HeaderHtmlAttributes(new { style = "text-align:center" });
                    columns.Bound(c => c.PostalCode).Filterable(false)
                    .HeaderHtmlAttributes(new { style = "text-align:center" }).HtmlAttributes(new { style = "text-align:right" }); ;
                    columns.Bound(c => c.MobilePhone).Filterable(false)
                    .HeaderHtmlAttributes(new { style = "text-align:center" }).HtmlAttributes(new { style = "text-align:right" });
                    columns.Bound(c => c.Status).Filterable(false)
                    .HeaderHtmlAttributes(new { style = "text-align:center" });
                })
                .ToolBar(tb =>
                {
                    tb.Search();
                    tb.Excel();
                })
                .Excel(excel => excel.Filterable(true).AllPages(true).ProxyURL(Url.Action("Excel_Export_Save")))                
                .Navigatable()
                .Sortable()
                .Scrollable(sc => sc.Endless(true))
                .Filterable(filterable => filterable.Extra(false)
                    .Operators(operators => operators.ForString(str => str.Clear().StartsWith("Starts with").IsEqualTo("Is equal to").IsNotEqualTo("Is not equal to"))))
                .Mobile()
                .HtmlAttributes(new { style = "height:100%;font-size:13px;" })
                .Events(events => events.DataBound("onDataBound").ExcelExport("onExportToExcel"))
                .Search(search =>
                {
                    search
                    .Field(f => f.DisplayName)
                    .Field(f => f.Email)
                    .Field(f => f.MobilePhone);
                })
                .DataSource(ds => ds.Ajax()
                    .Read(r => r.Url("/Report/MemberReport?handler=Read").Data("forgeryToken"))
                    .Model(m =>
                    {
                        m.Id(id => id.MemberId);
                        m.Field(x => x.MemberId).Editable(false);
                        m.Field(x => x.ModifiedById).Editable(false);
                        m.Field(x => x.DateModified).Editable(false);
                    })
                    .ServerOperation(false)))
        </div>
    </div>
</div>

<script>
    var studioId = 0;
    var statusId = 0;

    function onChangeStudio(e) {

        var studiolist = $("#Studio").data("kendoDropDownList");
        var statuslist = $("#Status").data("kendoDropDownList");

        studioId = studiolist.value();
        statusId = statuslist.value();

        var gridObject = $("#grdMembers").data("kendoGrid")
        gridObject.dataSource.transport.options.read.url = "/Reports/MemberReport?handler=Read&studioId=" + studioId + "&statusId=" + statusId;
        gridObject.dataSource.read();
    }

    function onChangeStatus(e) {
        var studiolist = $("#Studio").data("kendoDropDownList");
        var statuslist = $("#Status").data("kendoDropDownList");

        studioId = studiolist.value();
        statusId = statuslist.value();

        var gridObject = $("#grdMembers").data("kendoGrid");
        gridObject.dataSource.transport.options.read.url = "/Reports/MemberReport?handler=Read&studioId=" + studioId + "&statusId=" + statusId;
        gridObject.dataSource.read();
    }

    function onStatusDataBound(e) {
        var defaultItem = e.sender.dataSource.at(2); // set Active/suspended as default value
        e.sender.value(defaultItem.MemberStatusId);
        statusId = defaultItem.MemberStatusId;
    }

    function reloadPage() {
        location.reload(true);
    }

    function onDataBound() {       
        $(".k-grid-toolbar").addClass("text-left");
    }

    function forgeryToken() {
        return kendo.antiForgeryTokens();
    }

    function onExportToExcel(e) {
        var d = new Date();
        var dateToday = d.getDate() + "/" + (d.getMonth() + 1) + "/" + d.getFullYear();

        e.workbook.fileName = dateToday + "-MemberReport.xlsx";
        var sheet = e.workbook.sheets[0];
        var columns = sheet.columns;
        columns.forEach(function (column) {
            // also delete the width if it is set
            delete column.width;
            column.autoWidth = true;
        });

        sheet.frozenRows = 2;
        sheet.mergedCells = ["A1:K1"];
        sheet.name = "Members";

        var myHeaders = [{
            value: "Members Report",
            fontSize: 25,
            textAlign: "left",
            background: "#ff3700",
            color: "#ffffff"
        }];

        sheet.rows.splice(0, 0, { cells: myHeaders, type: "header", height: 50 });
    }

    $(document).ready(function () {

        var studioName = '@Model.SelectedStudio.StudioName';
        studioId = '@Model.SelectedStudio.StudioId';
        var dropdownlist = $("#Studio").data("kendoDropDownList");
        dropdownlist.text(studioName);
        dropdownlist.value(studioId);
        dropdownlist.trigger("change");       
        statusId = $("#Status").data("kendoDropDownList").value();

        //var gridObject = $("#grdMembers").data("kendoGrid")
        //gridObject.dataSource.transport.options.read.url = "/Reports/MemberReport?handler=Read&studioId=" + studioId + "&statusId=" + statusId;
        //gridObject.dataSource.read();
    });

</script>