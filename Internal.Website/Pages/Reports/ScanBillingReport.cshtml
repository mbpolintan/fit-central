@page
@model Internal.Website.ScanBillingReportModel
@using DataAccess.ViewModels
@using DataAccess.Models
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
@{
    ViewData["Title"] = "Scan Billing Statement";
}


<div class="col-md-5 text-left" style="padding:0.5em">
    @Html.Label("Studios: ")
    @(Html.Kendo().DropDownList()
            .Name("Studio")
            .DataTextField("StudioName")
            .DataValueField("StudioId")
            .Events(e => e.Change("onChangeStudio"))
            .BindTo((System.Collections.IEnumerable)ViewData["Studios"])
            .HtmlAttributes(new { style = "width:50%;" }))
</div>

<div class="bg-light content-maint mh-100 min-vh-100">
    <div class="row">
        <div class="col text-center">
            <h4 class="k-primary">
                <small class="k-text-primary">@ViewData["Title"]</small>
            </h4>
        </div>
    </div>
    <div class="row mh-100 min-vh-100">
        <div class="col mh-100 min-vh-100">
            @Html.AntiForgeryToken()
            @(Html.Kendo().Grid<VwScanBillable>()
                .Name("gridScans")
                .Columns(columns =>
                {
                    columns.Bound(e => e.DisplayName).Title("Name").Filterable(false)
                    .HeaderHtmlAttributes(new { style = "text-align:center" });
                    columns.Bound(e => e.Billed).Width("10%").Title("Billed Scans").Filterable(false)
                    .HeaderHtmlAttributes(new { style = "text-align:center" }).HtmlAttributes(new { style = "text-align:center" });
                    columns.Bound(e => e.ForBilling).Width("10%").Title("For Billing Scans").Filterable(false)
                    .HeaderHtmlAttributes(new { style = "text-align:center" }).HtmlAttributes(new { style = "text-align:center" });
                    columns.Bound(e => e.Ingnored).Width("10%").Title("Ignored Scans").Filterable(false)
                    .HeaderHtmlAttributes(new { style = "text-align:center" }).HtmlAttributes(new { style = "text-align:center" });
                })
                .Navigatable()
                .Sortable()
                .Filterable(filterable => filterable
                    .Extra(false)
                    .Operators(operators => operators
                        .ForString(str => str.Clear()
                            .StartsWith("Starts with")
                            .IsEqualTo("Is equal to")
                            .IsNotEqualTo("Is not equal to")
                        ))
                    )
                .Mobile()
                .HtmlAttributes(new { style = "height:100%; width:auto; font-size:13px;" })
                .Pageable(p =>
                {
                    //p.ButtonCount(5);
                    //p.PageSizes(true);
                    p.Refresh(true);
                })
                .ToolBar(tb =>
                {
                    tb.Search();
                })
                .Search(search =>
                {
                    search.Field(f => f.DisplayName);
                })
                .Scrollable()
                .ClientDetailTemplateId("templateScan")
                .DataSource(dataSource => dataSource
                            .Ajax()
                            .PageSize(20)
                            .Read(r => r.Url("/Reports/ScanBillingReport?handler=ReadScanBilling").Data("forgeryToken"))
                            .Model(m =>
                            {
                                m.Id(id => id.MemberId);
                            })
                )
            )
        </div>
    </div>
</div>

<script id="templateScan" type="text/kendo-tmpl">
    @(Html.Kendo().TabStrip()
      .Name("tabStrip_#=MemberId#")
      .SelectedIndex(0)
      .Animation(animation => animation.Open(open => open.Fade(FadeDirection.In)))
      .Items(items =>
      {
          items.Add().Text("Challenge Scans").Content(@<text>
                @(Html.Kendo().Grid<VwChallegeScans>()
                    .Name("grid_#=MemberId#")
                    .Columns(columns =>
                    {
                        columns.Bound(o => o.ChallengeNo).Title("Challenge No.").Width("15%")
                        .HtmlAttributes(new { @class = "text-right" }).HeaderHtmlAttributes(new { style = "text-align:center" });
                        columns.Bound(o => o.StartTestDate).Title("Start Test Date").Format("{0:d}").Width("25%")
                        .HtmlAttributes(new { @class = "text-center" }).HeaderHtmlAttributes(new { style = "text-align:center" });
                        columns.Bound(o => o.MidTestDate).Title("Mid Test Date").Format("{0:d}").Width("25%")
                        .HtmlAttributes(new { @class = "text-center" }).HeaderHtmlAttributes(new { style = "text-align:center" });
                        columns.Bound(o => o.EndTestDate).Title("End Test Date").Format("{0:d}").Width("25%")
                        .HtmlAttributes(new { @class = "text-center" }).HeaderHtmlAttributes(new { style = "text-align:center" });
                        columns.Command(c =>
                        {

                            c.Custom("BillScan").Text(" ").IconClass("k-icon k-i-currency")
                            .HtmlAttributes(new { style = "align-text:center; margin:0;" })
                            .Click("onBilledChallenge");
                        }).Title("Bill Scan").HeaderHtmlAttributes(new { style = "text-align:center" }).HtmlAttributes(new { style = "text-align:center" });
                    })
                    .ToolBar(tb =>
                        {
                            tb.ClientTemplateId("GridToolbarTemplate");
                        })
                    .Pageable(p =>
                    {
                        p.ButtonCount(5);
                        p.PageSizes(true);
                    })
                    .Events(e => e.DataBound("onDataBound"))
                    .HtmlAttributes(new { style = "width:100%; font-size:13px; padding:0" })
                    .Sortable()
                    .DataSource(dataSource => dataSource
                        .Ajax()
                         .PageSize(10)
                        .Read(r => r.Url("/Reports/ScanBillingReport?handler=ReadChallengeScans&memberId=#=MemberId#").Data("forgeryToken"))
                        )
                    .ToClientTemplate())

            </text>);
          items.Add().Text("Individual Scans").Content(@<text>
                @(Html.Kendo().Grid<VwIndividualScans>()
                    .Name("gridItems_#=MemberId#")
                    .Columns(columns =>
                    {
                        columns.Bound(o => o.TestDateTime).Format("{0:d}").Width("90%")
                        .HtmlAttributes(new { @class = "text-center" }).HeaderHtmlAttributes(new { style = "text-align:center" });
                        columns.Command(c =>
                        {
                            c.Custom("BillScan").Text(" ").IconClass("k-icon k-i-currency").HtmlAttributes(new { style = "align-text:center; margin:0;" })
                            .Click("onBilledIndividual");
                        }).Title("Bill Scan").HeaderHtmlAttributes(new { style = "text-align:center" }).HtmlAttributes(new { style = "text-align:center" });
                    })
                    .Pageable(p =>
                    {
                        p.ButtonCount(5);
                        p.PageSizes(true);
                    })
                    .ToolBar(tb =>
                    {
                        tb.ClientTemplateId("GridToolbarTemplate");
                    })
                    .Events(e => e.DataBound("onDataBound"))
                    .HtmlAttributes(new { style = "width:100%; font-size:13px; padding:0" })
                    .Sortable()
                    .DataSource(dataSource => dataSource
                        .Ajax()
                        .PageSize(10)
                        .Read(r => r.Url("/Reports/ScanBillingReport?handler=ReadIndividualScans&memberId=#=MemberId#").Data("forgeryToken")))
                    .ToClientTemplate())
            </text>);
      }).ToClientTemplate())
</script>

<script id="GridToolbarTemplate" type="text/x-kendo-template">
    <div class="con-md-3 toolbar">
        @(Html.Label("Not Billed"))
        <span class="notBilled"></span>
    </div>
    <div class="con-md-3 toolbar">
        @(Html.Label("Billed"))
        <span class="Billed"></span>
    </div>
</script>

<div id="BillScan">
    @Html.Label("Status: ")
    @(Html.Kendo().DropDownList()
        .Name("Status")
        .DataTextField("Text")
        .DataValueField("Value")
        .HtmlAttributes(new { style = "width:50%;" })
        .Events(e => e.Change("onChangeStatus"))
        .BindTo(new List<SelectListItem>() {
                new SelectListItem() {
                    Text = "Billed",
                    Value = "1"
                },
                new SelectListItem() {
                    Text = "For Billing",
                    Value = "0"
                },
                new SelectListItem() {
                    Text = "Ignore",
                    Value = "2"
                }
            })
        .Value("1")
        )

    @(Html.Kendo().Button()
        .Name("Submit")
        .HtmlAttributes(new { type = "button", @class = "k-primary" })
        .Content("Update")
        .Events(e => e.Click("onUpdateStatus")))

</div>

<script>
    var studioId = 0;
    var ScanId = 0;
    var ChallengeScanIds = '';
    var StartScanId = 0;
    var MidScanId = 0;
    var EndScanId = 0;
    var statusId = 0;
    var category = '';
    var memberId = 0;
   

    var KendoWindowManager = {
        InitKendoWindow: function () {
            $('#BillScan').kendoWindow({
                title: "Update Billing Status",
                width: "20%",
                modal: true,
                actions: ["Close"],
                visible: false
            });          
        }
    }

     $(document).ready(function () {
        var studioName = '@Model.SelectedStudio.StudioName';
        studioId = '@Model.SelectedStudio.StudioId';
        var dropdownlist = $("#Studio").data("kendoDropDownList");
        dropdownlist.text(studioName);
        dropdownlist.value(studioId);
        dropdownlist.trigger("change");

         KendoWindowManager.InitKendoWindow();

         studioId = 0;
         ScanId = 0;
         StartScanId = 0;
         MidScanId = 0;
         EndScanId = 0;
         statusId = 0;
         category = '';
         memberId = 0;

     });

    function onDataBound(e) {
        var grid = this;
        var currentRecords = grid.dataSource.view();
        //console.log(currentRecords);
        for (var i = 0; i < currentRecords.length; i++) {
           
            if (currentRecords[i].BillStatus == 0) {
                grid.tbody.find("tr[data-uid='" + currentRecords[i].uid + "']").find("td").addClass("notBilled");
                grid.tbody.find("td:last-child").removeClass("notBilled");
            } else if (currentRecords[i].BillStatus == 1) {
                grid.tbody.find("tr[data-uid='" + currentRecords[i].uid + "']").find("td").addClass("Billed");
                grid.tbody.find("td:last-child").removeClass("Billed");
            } else {
                grid.tbody.find("tr[data-uid='" + currentRecords[i].uid + "']").find("td").addClass("Ingore");               
            }
        }
    }

    function forgeryToken() {
        return kendo.antiForgeryTokens();
    }

    function onChangeStudio(e) {      
        var dropdownlist = $("#Studio").data("kendoDropDownList");   
        studioId = dropdownlist.value();

        var gridObject = $("#gridScans").data("kendoGrid")
        gridObject.dataSource.transport.options.read.url = "/Reports/ScanBillingReport?handler=ReadScanBilling&studioId=" + studioId;
        gridObject.dataSource.read();
    }

    function onBilledIndividual(e) {
        e.preventDefault();

        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        ScanId = dataItem["ScanId"];     
        memberId = dataItem["MemberId"]; 
        category = 'individual';
       
        var wnd = $("#BillScan").data("kendoWindow");
        wnd.center().open();
    }

    function onBilledChallenge(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        StartScanId = dataItem["StartScanId"];
        MidScanId = (dataItem["MidScanId"] == null || dataItem["MidScanId"] == "") ? '0' : dataItem["MidScanId"];
        EndScanId = (dataItem["EndScanId"] == null || dataItem["EndScanId"] == "") ? '0' : dataItem["EndScanId"];  
        memberId = dataItem["MemberId"];      

        ChallengeScanIds = StartScanId + ',' + MidScanId + ',' + EndScanId;
        category = 'challenge';  
       
        var wnd = $("#BillScan").data("kendoWindow");
        wnd.center().open();
    }

    function removeTime(date) {
        var date = new Date(date);
        var dateString = [
            ("0" + date.getDate()).slice(-2),
            ("0" + (date.getMonth() + 1)).slice(-2),
            date.getFullYear()
        ].join("-");
        return dateString;
    }

    function onUpdateStatus() {
        var statusId = $("#Status").data("kendoDropDownList").value();
        var wnd = $("#BillScan").data("kendoWindow");
        wnd.close();

        if (category == 'challenge') {
            
            var data = { scanIds: ChallengeScanIds , statusId: statusId };
            kendo.confirm("Are you sure that you want to proceed?").then(function () {
            $.ajax({
                type: "POST",
                url: "/Reports/ScanBillingReport?handler=UpdateChallengeScans",
                data: data,
                dataType: 'json',
                headers: {
                    RequestVerificationToken: $('input:hidden[name="__RequestVerificationToken"]').val()
                },
                success: function (data) {                  
                    kendo.alert("Record successfully updated.");
                    var gridObject = $("#grid_" + memberId).data("kendoGrid")
                    gridObject.dataSource.transport.options.read.url = "/Reports/ScanBillingReport?handler=ReadChallengeScans&memberId=" + memberId;
                    gridObject.dataSource.read();
                },
                error: function (e) {
                    var wnd = $("#BillScan").data("kendoWindow");
                    wnd.close();
                    kendo.alert('Something Wrong. Contact your administrator.');
                }
            });

        });
        } else if (category == 'individual') {

            var data = { scanId: ScanId, statusId: statusId };
            kendo.confirm("Are you sure that you want to proceed?").then(function () {
                $.ajax({
                    type: "POST",
                    url: "/Reports/ScanBillingReport?handler=UpdateIndividualScans",
                    data: data,
                    dataType: 'json',
                    headers: {
                        RequestVerificationToken: $('input:hidden[name="__RequestVerificationToken"]').val()
                    },
                    success: function (data) {

                        var gridObject = $("#gridItems_" + memberId).data("kendoGrid")
                        gridObject.dataSource.transport.options.read.url = "/Reports/ScanBillingReport?handler=ReadIndividualScans&memberId=" + memberId;
                        gridObject.dataSource.read();
                        kendo.alert("Record successfully updated.");

                    },
                        error: function () {
                        var wnd = $("#BillScan").data("kendoWindow");
                        wnd.close();
                        kendo.alert('Something Wrong. Contact your administrator.');
                    }
                });
            });

        } else {
            
            kendo.alert("Undefined category. Please contact your administrator.");
        }
    }

    function onChangeStatus() {
        studioId = $("#Status").data("kendoDropDownList").value();
      
    }

</script>