@page
@model StudioCentral.ChallengeManagementModel
@using DataAccess.Models
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
@{
    ViewData["Title"] = "Challenge Management";
}

<div class="bg-dark content-maint mh-100 min-vh-100">
    @foreach (var error in Model.Errors)
    {
        <script>
                iziToast.error({
                    title: '@error.Field',
                    message: '@error.Message',
                    position: 'center'
                });
        </script>
    }
    <div class="row">
        <div class="col text-center">
            <h4 class="k-primary">
                <small class="k-text-primary">@ViewData["Title"]</small>
            </h4>
        </div>
    </div>
    <div class="row mh-100 min-vh-100">
        <div class="col-md-12 mh-100 min-vh-100">
            @Html.AntiForgeryToken()
            @(Html.Kendo().Grid<Challenge>()
                .Name("grdChallenges")
                .Columns(columns =>
                {
                    columns.Bound(c => c.ChallengeNo).ClientTemplate("Challenge #=ChallengeNo#").Width("15%");
                    columns.Bound(c => c.StartDate).Width("10%").Format("{0:d}");
                    columns.Bound(c => c.EndDate).Width("10%").Format("{0:d}");
                    columns.Bound(c => c.StartScanFromDate).Width("10%").Format("{0:d}").Filterable(false);
                    columns.Bound(c => c.StartScanToDate).Width("10%").Format("{0:d}").Filterable(false);
                    columns.Bound(c => c.MidScanFromDate).Width("10%").Format("{0:d}").Filterable(false);
                    columns.Bound(c => c.MidScanToDate).Width("10%").Format("{0:d}").Filterable(false);
                    columns.Bound(c => c.EndScanFromDate).Width("0%").Format("{0:d}").Filterable(false);
                    columns.Bound(c => c.EndScanToDate).Width("10%").Format("{0:d}").Filterable(false);
                    columns.Command(c =>
                    {
                        c.Edit().Text(" ").IconClass("k-icon k-i-edit").HtmlAttributes(new { style = "align-text:center" });
                        c.Destroy().Text(" ").IconClass("k-icon k-i-delete").HtmlAttributes(new { style = "align-text:center" });
                    }).Title("Actions");
                }).HtmlAttributes(new { @class = "text-center" })
                .Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("CustomChallengeEditor").Window(w => w.Title("New Challenge Details"))
                )
                .Navigatable()
                .Filterable(filterable => filterable
                    .Extra(false)
                    .Operators(operators => operators
                        .ForString(str => str.Clear()
                            .StartsWith("Starts with")
                            .IsEqualTo("Is equal to")
                            .IsNotEqualTo("Is not equal to")
                        ))
                    )
                .Mobile()
                .Sortable()
                .Scrollable(scr => scr.Height(400))
                .HtmlAttributes(new { style = "height:100%; width:auto; font-size:13px;" })
                .Pageable(p =>
                {
                    p.ButtonCount(5);
                    p.PageSizes(true);
                })
                .ToolBar(tb =>
                {
                    tb.Create().Text("New Challenge").IconClass("k-icon k-i-dictionary-add");
                    tb.Search();
                })
                .Search(search =>
                {
                    search.Field(f => f.ChallengeNo);
                })
                .Events(e => e.DataBound("onDataBound").SaveChanges("onGridSave").Save("onGridSave"))
                .DataSource(ds => ds.Ajax()
                    .PageSize(10)
                    .Read(r => r.Url("/GlobalAdmin/ChallengeManagement?handler=Read").Data("forgeryToken"))
                    .Create(c => c.Url("/GlobalAdmin/ChallengeManagement?handler=Create").Data("forgeryToken"))
                    .Update(u => u.Url("/GlobalAdmin/ChallengeManagement?handler=Update").Data("forgeryToken"))
                    .Destroy(d => d.Url("/GlobalAdmin/ChallengeManagement?handler=Destroy").Data("forgeryToken"))
                    .Model(m =>
                    {
                        m.Id(id => id.ChallengeId);
                        m.Field(x => x.ChallengeId).Editable(false);
                    })
                )
            )
        </div>
    </div>
</div>

<script>
    function forgeryToken() {
        return kendo.antiForgeryTokens();
    }
    function onDataBound() {
        //position the add new button to the left.
        $(".k-grid-toolbar").addClass("text-left");
    }
    function onGridSave(e) {
        e.sender.one("dataBound", function () {
            e.sender.dataSource.read();
            reloadPage();
        });
    }

     function reloadPage() {
        location.reload(true);
    }

</script>