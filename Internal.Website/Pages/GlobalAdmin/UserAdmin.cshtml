@page
@model Internal.Website.UserAdminModel
@using DataAccess.Models
@using DataAccess.ViewModels
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
@{ ViewData["Title"] = "User Administration"; }

<div class="bg-light">  

    <div class="col text-left">
        <h4 class="k-primary">
            <small class="k-text-primary">@ViewData["Title"]</small>
        </h4>
    </div>
    @Html.AntiForgeryToken()
    @(Html.Kendo().Grid<UserViewModel>()
        .Name("grdUser")
        .Columns(columns =>
        {
            columns.Bound(c => c.UserEmail).Title("User Email Address").Width("40%");
            columns.ForeignKey(c => c.AppGroupId, (System.Collections.IEnumerable)ViewData["groups"], "AppGroupId", "Description").Title("Group").Width("40%");
            columns.Command(c =>
            {
                c.Edit().Text(" ").IconClass("k-icon k-i-edit").HtmlAttributes(new { style = "align-text:center" });
                c.Destroy().Text(" ").IconClass("k-icon k-i-delete").HtmlAttributes(new { style = "align-text:center" });
            }).Title("Actions").Width("15%").HtmlAttributes(new { @class = "text-center" }).HeaderHtmlAttributes(new { @class = "text-center" });
        }).HtmlAttributes(new { @class = "text-center" })
        .Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("CustomUserEditor").Window(w => w.Title("New User Details")))
        .ClientDetailTemplateId("template")
        .Navigatable().Mobile().Sortable()
        .Filterable(filterable => filterable.Extra(false).Operators(operators => operators
                .ForString(str => str.Clear().StartsWith("Starts with").IsEqualTo("Is equal to").IsNotEqualTo("Is not equal to"))))
        .Scrollable(scr => scr.Height(500))
        .HtmlAttributes(new { style = "height:100%; width:auto; font-size:13px;" })
        .Pageable(p => p.ButtonCount(5).PageSizes(true))
        .ToolBar(tb =>
        {
            tb.Create().Text("New User").IconClass("k-icon k-i-dictionary-add");
            tb.Search();
        })
        .Search(search => search.Field(f => f.UserEmail))
        .Events(e => e.DataBound("onDataBound").SaveChanges("onSave").Edit("onEditUser"))
        .DataSource(ds => ds.Ajax()
            .PageSize(20)
            .Events(events => events.Error("error_handler"))
            .Read(r => r.Url("/GlobalAdmin/UserAdmin?handler=Read").Data("forgeryToken"))
            .Create(c => c.Url("/GlobalAdmin/UserAdmin?handler=Create").Data("forgeryToken"))
            .Update(u => u.Url("/GlobalAdmin/UserAdmin?handler=Update").Data("forgeryToken"))
            .Destroy(d => d.Url("/GlobalAdmin/UserAdmin?handler=Destroy").Data("forgeryToken"))
            .Model(m => m.Id(id => id.AppUserId))))
    
</div>

<script id="template" type="text/kendo-tmpl">
    @Html.AntiForgeryToken()
    @(Html.Kendo().Grid<TrainingGymUserViewModel>()
        .Name("grid_#=AppUserId#")
        .Columns(columns =>
        {
            columns.ForeignKey(o => o.GlobalTrainingGymId, (System.Collections.IEnumerable)ViewData["trainingGyms"], "GlobalTrainingGymId", "GymName")
            .Title("Gym Name").Width("90%").HeaderHtmlAttributes(new { style = "text-align:center" }); 
            columns.Command(c =>
            {
                c.Destroy().Text(" ").IconClass("k-icon k-i-delete").HtmlAttributes(new { style = "align-text:center" });
            }).Title("Remove").HtmlAttributes(new { @class = "text-center" }).HeaderHtmlAttributes(new { @class = "text-center" });
        })
        .ToolBar(tb => tb.Create().Text("Add Parent Studio").IconClass("k-icon .k-i-marker-pin"))
        .Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("CustomUserTrainingGymEditor").Window(w => w.Title("Assign New Parent Studio")))
        .Navigatable().Sortable().Filterable().Mobile()
        .Scrollable(scr => scr.Height(150))
        .HtmlAttributes(new { style = "height:auto; width:auto; font-size:13px;" })
        .Pageable(p => p.ButtonCount(5).PageSizes(true))
        .DataSource(dataSource => dataSource
            .Ajax()
            .Events(events => events.Error("error_handlerGym"))
            .Read(r => r.Url("/GlobalAdmin/UserAdmin?handler=ReadGym&userId=#=AppUserId#").Data("forgeryToken"))
            .Create(c => c.Url("/GlobalAdmin/UserAdmin?handler=AssignGym&userId=#=AppUserId#").Data("forgeryToken"))
            .Destroy(d => d.Url("/GlobalAdmin/UserAdmin?handler=DestroyGym").Data("forgeryToken"))
            .Model(m =>m.Id(id => id.AppUserId))
            .PageSize(10) )
        .Events(events => events.SaveChanges("onStudioSave"))
        .ToClientTemplate())
</script>


<script>
    function forgeryToken() {
        return kendo.antiForgeryTokens();
    }

    function error_handler(e) {
        if (e.errors) {
            var message = "";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            iziToast.error({
                title: 'Error',
                message: message,
                position: 'center'
            });

            var gridObject = $("#grdUser").data("kendoGrid");
            gridObject.dataSource.transport.options.read.url = "/GlobalAdmin/UserAdmin?handler=Read";
            gridObject.dataSource.read();
        }
    }

    function error_handlerGym(e) {
        if (e.errors) {
            var message = "";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            console.log(message);
            iziToast.error({
                title: 'Error',
                message: 'Training Gym already exist.',
                position: 'center'
            });

            var gridObject = $("#grid_" + message).data("kendoGrid");
            gridObject.dataSource.transport.options.read.url = "/GlobalAdmin/UserAdmin?handler=ReadGym&userId=" + message;
            gridObject.dataSource.read();
        }
    }

    function onDataBound(e) {
        //position the add new button to the left.
        $(".k-grid-toolbar").addClass("text-left");
    }

    function onStudioSave(e) {
        e.sender.one("dataBound", function () {           
            e.sender.dataSource.read();            
        });
    }

    function onSave(e) {
        e.sender.one("dataBound", function () {
            var gridObject = $("#grdUser").data("kendoGrid")
            gridObject.dataSource.transport.options.read.url = "/GlobalAdmin/UserAdmin?handler=Read";
            gridObject.dataSource.read();
        });
    }

    function onEditUser(e) {
        $('.k-window-title').html('User Details');
    }

    $(document).ready(function () {
        $('body').on('click', '.k-grid-edit', function () {
            $('.k-window-title').html('User Details');
        });
    });
</script>
