@page
@model Internal.Website.ManagerAdminModel
@using DataAccess.Models
@using DataAccess.ViewModels
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
@{ ViewData["Title"] = "Manager Administration"; }

    

<div class="bg-light content-maint mh-100 min-vh-100">
    <div class="row mh-100 min-vh-100">
        <div class="col-md-12 mh-100 min-vh-100">
            <div class="col text-left">
                <h4 class="k-primary">
                    <small class="k-text-primary">@ViewData["Title"]</small>
                </h4>
            </div>
            <div class="col-md-6 text-left" style="padding:0.5em">
                @Html.Label("Parent Studio: ")
                @(Html.Kendo().DropDownList()
                    .Name("Gym")
                    .DataTextField("GymName")
                    .DataValueField("GlobalTrainingGymId")
                    .Events(e => e.Change("onChange"))
                    .BindTo((System.Collections.IEnumerable)ViewData["gym"])
                    .HtmlAttributes(new { style = "width:30%;" }))
            </div>
            @Html.AntiForgeryToken()
            @(Html.Kendo().Grid<ManagerViewModel>()
                .Name("grdUser")
                .Columns(columns =>
                {
                    columns.Bound(c => c.UserEmail).Title("User Email Address").Width("40%");
                    columns.Command(c =>
                    {
                        c.Edit().Text(" ").IconClass("k-icon k-i-edit").HtmlAttributes(new { style = "align-text:center" });
                        c.Destroy().Text(" ").IconClass("k-icon k-i-delete").HtmlAttributes(new { style = "align-text:center" });
                    }).Title("Actions").Width("15%").HtmlAttributes(new { @class = "text-center" }).HeaderHtmlAttributes(new { @class = "text-center" });
                }).HtmlAttributes(new { @class = "text-center" })
                .Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("CustomManagerEditor").Window(w => w.Title("New Manager Email"))
                )
                .ClientDetailTemplateId("template")
                .Navigatable()
                .Filterable(filterable => filterable
                    .Extra(false)
                    .Operators(operators => operators
                        .ForString(str => str.Clear()
                            .StartsWith("Starts with")
                            .IsEqualTo("Is equal to")
                            .IsNotEqualTo("Is not equal to")
                        ))
                    )
                .Mobile()
                .Sortable()
                .Scrollable(scr => scr.Height(400))
                .HtmlAttributes(new { style = "height:100%; width:auto; font-size:13px;" })
                .Pageable(p =>
                {
                    p.ButtonCount(5);
                    p.PageSizes(true);
                })
                .ToolBar(tb =>
                {
                    tb.Create().Text("New Manager").IconClass("k-icon k-i-user");
                    tb.Search();
                })
                .Search(search =>
                {
                    search.Field(f => f.UserEmail);
                })
                .Events(e => e.DataBound("onDataBound").SaveChanges("onSave").Save("onSave"))
                .DataSource(ds => ds.Ajax()
                    .PageSize(20)
                    .Events(events => events.Error("error_handler"))
                    .Read(r => r.Url("/StudioAdmin/ManagerAdmin?handler=Read").Data("forgeryToken"))
                    .Create(c => c.Url("/StudioAdmin/ManagerAdmin?handler=Create").Data("forgeryToken"))
                    .Update(u => u.Url("/StudioAdmin/ManagerAdmin?handler=Update").Data("forgeryToken"))
                    .Destroy(d => d.Url("/StudioAdmin/ManagerAdmin?handler=Destroy").Data("forgeryToken"))
                    .Model(m =>
                    {
                        m.Id(id => id.AppUserId);
                        m.Field(x => x.AppUserId).Editable(false);
                    })
                )
            )
        </div>
    </div>
</div>

<script id="template" type="text/kendo-tmpl">
    @Html.AntiForgeryToken()
    @(Html.Kendo().Grid<UserStudioViewModel>()
        .Name("grid_#=AppUserId#")
        .Columns(columns =>
        {
            columns.Bound(c => c.StudioName)
            .Title("Studio Name").Width("90%").HeaderHtmlAttributes(new { style = "text-align:center" });
            columns.Command(c =>
            {
                c.Destroy().Text(" ").IconClass("k-icon k-i-delete").HtmlAttributes(new { style = "align-text:center" });
            }).Title("Remove").HtmlAttributes(new { @class = "text-center" }).HeaderHtmlAttributes(new { @class = "text-center" });
        })
        .ToolBar(tb =>tb.Create().Text("Add Studio").IconClass("k-icon .k-i-marker-pin"))
        .Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("CustomUserStudioEditor").Window(w => w.Title("Assign New Studio")))
        .Navigatable()
        .Sortable()
        .Filterable()
        .Mobile()
        .Scrollable(scr => scr.Height(150))
        .HtmlAttributes(new { style = "height:100%; width:auto; font-size:13px;" })
        .Pageable(p =>
        {
            p.ButtonCount(5);
            p.PageSizes(true);
        })
        .DataSource(dataSource => dataSource
            .Ajax()
            .Events(events => events.Error("error_handlerStudio"))
            .Read(r => r.Url("/StudioAdmin/ManagerAdmin?handler=ReadStudio&userId=#=AppUserId#").Data("forgeryToken"))
            .Create(c => c.Url("/StudioAdmin/ManagerAdmin?handler=AssignStudio&userId=#=AppUserId#").Data("forgeryToken"))
            .Destroy(d => d.Url("/StudioAdmin/ManagerAdmin?handler=DestroyStudio&userId=#=AppUserId#").Data("forgeryToken"))
            .Model(m =>
            {
                m.Id(id => id.StudioUserId);
            })
            .PageSize(10)
        )
        .Events(events => events.Save("onStudioSave").SaveChanges("onStudioSave"))
        .ToClientTemplate()
    )
</script>


<script>


    function forgeryToken() {
        return kendo.antiForgeryTokens();
    }

    function error_handler(e) {
        if (e.errors) {
            var message = "";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            iziToast.error({
                title: 'Error',
                message: message,
                position: 'center'
            });

            var gridObject = $("#grdUser").data("kendoGrid");
            gridObject.dataSource.transport.options.read.url = "/StudioAdmin/ManagerAdmin?handler=Read";
            gridObject.dataSource.read();
        }
    }

    function error_handlerStudio(e) {
        if (e.errors) {
            var message = "";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            console.log(message);
            iziToast.error({
                title: 'Error',
                message: 'Studio already exist.',
                position: 'center'
            });

            var gridObject = $("#grid_" + message).data("kendoGrid");
            gridObject.dataSource.transport.options.read.url = "/StudioAdmin/ManagerAdmin?handler=ReadStudio&userId=" + message;
            gridObject.dataSource.read();
        }
    }

    function onChange() {
        var gymlist = $("#Gym").data("kendoDropDownList");
        gymId = gymlist.value();     

        var gridObject = $("#grdUser").data("kendoGrid")
        gridObject.dataSource.transport.options.read.url = "/StudioAdmin/ManagerAdmin?handler=Read&gymId=" + gymId;
        gridObject.dataSource.read();
    }


    function onDataBound(e) {
        //position the add new button to the left.
        $(".k-grid-toolbar").addClass("text-left");
    }

    function onStudioSave(e) {
        e.sender.one("dataBound", function () {
            e.sender.dataSource.read();           
        });
    }

    function onSave(e) {
        e.sender.one("dataBound", function () {
            console.log(e.sender);

            var gridObject = $("#grdUser").data("kendoGrid")
            gridObject.dataSource.transport.options.read.url = "/StudioAdmin/ManagerAdmin?handler=Read";
            gridObject.dataSource.read();
        });
    }

     function reloadPage() {
        location.reload(true);
    }

    $(document).ready(function () {
        $('body').on('click', '.k-grid-edit', function () {
            $('.k-window-title').html('User Details');
        });
    });
</script>
