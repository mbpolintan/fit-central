@page
@model Internal.Website.Pages.StudioAdmin.ScoringTemplateModel
@using DataAccess.Models
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
@{ ViewData["Title"] = "Challenge Scoring Management"; }

<div class="bg-light content-maint mh-100 min-vh-100">
    <div class="row mh-100 min-vh-100">
        <div class="col-md-12 mh-100 min-vh-100">
            <div class="col text-left">
                <h4 class="k-primary">
                    <small class="k-text-primary">@ViewData["Title"]</small>
                </h4>
            </div>
            <div class="col-md-6 text-left" style="padding:0.5em">
                @Html.Label("Parent Studio: ")
                @(Html.Kendo().DropDownList()
                    .Name("Gym")
                    .DataTextField("GymName")
                    .DataValueField("GlobalTrainingGymId")
                    .Events(e => e.Change("onChange"))
                    .BindTo((System.Collections.IEnumerable)ViewData["gym"])
                    .HtmlAttributes(new { style = "width:30%;" }))
            </div>
            @Html.AntiForgeryToken()
            @(Html.Kendo().PanelBar()
                .Name("panelbar")
                .ExpandMode(PanelBarExpandMode.Multiple)
                .Items(panelbar =>
                {
                    panelbar.Add().Text("Weighted System")
                    .Expanded(true)                   
                    .Content(@<div class="col-md-12">
                              @(Html.Kendo().Grid<WeightedSystem>()
                                .Name("grdWeightedSystem")
                                .Columns(columns =>
                                {
                                    columns.Bound(c => c.Category).Width("30%")
                                    .HeaderHtmlAttributes(new { style = "text-align:center" }).HtmlAttributes(new { style = "text-align:left" });
                                    columns.Bound(c => c.UpperRange).Width("10%").Filterable(false)
                                    .HeaderHtmlAttributes(new { style = "text-align:center" }).HtmlAttributes(new { style = "text-align:center" });
                                    columns.Bound(c => c.UpperRangeWeighted).Title("Weighted").Width("10%").Filterable(false)
                                    .HeaderHtmlAttributes(new { style = "text-align:center" }).HtmlAttributes(new { style = "text-align:center" });
                                    columns.Bound(c => c.MidRange).Width("10%").Filterable(false)
                                    .HeaderHtmlAttributes(new { style = "text-align:center" }).HtmlAttributes(new { style = "text-align:center" });
                                    columns.Bound(c => c.MidRangeWeighted).Title("Weighted").Width("10%").Filterable(false)
                                    .HeaderHtmlAttributes(new { style = "text-align:center" }).HtmlAttributes(new { style = "text-align:center" });
                                    columns.Bound(c => c.LowerRange).Width("10%").Filterable(false)
                                    .HeaderHtmlAttributes(new { style = "text-align:center" }).HtmlAttributes(new { style = "text-align:center" });
                                    columns.Bound(c => c.LowerRangeWeighted).Title("Weighted").Width("10%").Filterable(false)
                                    .HeaderHtmlAttributes(new { style = "text-align:center" }).HtmlAttributes(new { style = "text-align:center" });
                                    columns.Command(c =>
                                    {
                                        c.Edit().Text(" ").IconClass("k-icon k-i-edit").HtmlAttributes(new { style = "align-text:center" });
                                        c.Destroy().Text(" ").IconClass("k-icon k-i-delete").HtmlAttributes(new { style = "align-text:center" });
                                    }).Title("Actions").HeaderHtmlAttributes(new { style = "text-align:center" });
                                }).HtmlAttributes(new { @class = "text-center" })
                                .Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("CustomWeightedScoreEditor").Window(w => w.Title("Category Details"))
                                )
                                .Navigatable()
                                .Filterable(filterable => filterable
                                    .Extra(false)
                                    .Operators(operators => operators
                                        .ForString(str => str.Clear()
                                            .StartsWith("Starts with")
                                            .IsEqualTo("Is equal to")
                                            .IsNotEqualTo("Is not equal to")
                                        ))
                                    )
                                .Mobile()
                                .Sortable()
                                .Scrollable(scr => scr.Height(400))
                                .HtmlAttributes(new { style = "height:100%; width:auto; font-size:13px;" })
                                .Pageable(p =>
                                {
                                    p.ButtonCount(5);
                                    p.PageSizes(true);
                                })
                                .ToolBar(tb =>
                                {
                                    tb.Create().Text("New Category").IconClass("k-icon k-i-dictionary-add");
                                    tb.Search();
                                })
                                .Search(search =>
                                {
                                    search.Field(f => f.Category);
                                })
                                .Events(e => e.DataBound("onDataBound").SaveChanges("onGridSave").Save("onGridSave"))
                                .DataSource(ds => ds.Ajax()
                                    .PageSize(10)
                                    .Events(events => events.Error("error_handler"))
                                    .Read(r => r.Url("/StudioAdmin/ScoringTemplate?handler=ReadWeightedSystem").Data("forgeryToken"))
                                    .Create(c => c.Url("/StudioAdmin/ScoringTemplate?handler=CreateWeightedSystem").Data("forgeryToken"))
                                    .Update(u => u.Url("/StudioAdmin/ScoringTemplate?handler=UpdateWeightedSystem").Data("forgeryToken"))
                                    .Destroy(d => d.Url("/StudioAdmin/ScoringTemplate?handler=DestroyWeightedSystem").Data("forgeryToken"))
                                    .Model(m =>
                                    {
                                        m.Id(id => id.WeightedSystemId);
                                    })
                                )
                              )
                            </div>);

                    panelbar.Add().Text("Points System")
                    .Expanded(true)
                    //.HtmlAttributes(new { style = "height:100%; width:auto; font-size:13px;" })
                    .Content(@<div class="col-md-12">
                            @(Html.Kendo().Grid<PointsSystem>()
                                .Name("grdPointsSystem")
                                .Columns(columns =>
                                {
                                    columns.Bound(c => c.PointsAllocation).Width("20%").Filterable(false)
                                    .HeaderHtmlAttributes(new { style = "text-align:center" }).HtmlAttributes(new { style = "text-align:center" });
                                    columns.Bound(c => c.BeforeAndAfterPicture).Width("10%").Filterable(false)
                                    .HeaderHtmlAttributes(new { style = "text-align:center" }).HtmlAttributes(new { style = "text-align:center" });
                                    columns.Bound(c => c.InbodyScore).Width("10%").Filterable(false)
                                    .HeaderHtmlAttributes(new { style = "text-align:center" }).HtmlAttributes(new { style = "text-align:center" });
                                    columns.Bound(c => c.WeightLoss).Width("10%").Filterable(false)
                                    .HeaderHtmlAttributes(new { style = "text-align:center" }).HtmlAttributes(new { style = "text-align:center" });
                                    columns.Bound(c => c.Pbfloss).Title("Percent Body Fat").Width("10%").Filterable(false)
                                    .HeaderHtmlAttributes(new { style = "text-align:center" }).HtmlAttributes(new { style = "text-align:center" });
                                    columns.Bound(c => c.Smmgain).Title("Skeletal Muscle Mass").Width("10%").Filterable(false)
                                    .HeaderHtmlAttributes(new { style = "text-align:center" }).HtmlAttributes(new { style = "text-align:center" });
                                    columns.Bound(c => c.Vflloss).Title("Visceral Fat Level").Width("10%").Filterable(false)
                                    .HeaderHtmlAttributes(new { style = "text-align:center" }).HtmlAttributes(new { style = "text-align:center" });
                                    columns.Bound(c => c.ClassAttended).Width("10%").Filterable(false)
                                    .HeaderHtmlAttributes(new { style = "text-align:center" }).HtmlAttributes(new { style = "text-align:center" });
                                    columns.Command(c =>
                                    {
                                        c.Edit().Text(" ").IconClass("k-icon k-i-edit").HtmlAttributes(new { style = "align-text:center" });
                                        c.Destroy().Text(" ").IconClass("k-icon k-i-delete").HtmlAttributes(new { style = "align-text:center" });
                                    }).Title("Actions").HeaderHtmlAttributes(new { style = "text-align:center" });
                                }).HtmlAttributes(new { @class = "text-center" })
                                .Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("CustomPointsScoreEditor").Window(w => w.Title("Points Allocation Details"))
                                )
                                .Navigatable()
                                .Filterable(filterable => filterable
                                    .Extra(false)
                                    .Operators(operators => operators
                                        .ForString(str => str.Clear()
                                            .StartsWith("Starts with")
                                            .IsEqualTo("Is equal to")
                                            .IsNotEqualTo("Is not equal to")
                                        ))
                                    )
                                .Mobile()
                                .Sortable()
                                .Scrollable(scr => scr.Height(400))
                                .HtmlAttributes(new { style = "height:100%; width:auto; font-size:13px;" })
                                .Pageable(p =>
                                {
                                    p.ButtonCount(5);
                                    p.PageSizes(true);
                                })
                                .ToolBar(tb =>
                                {
                                    tb.Create().Text("New Points Allocation").IconClass("k-icon k-i-dictionary-add");
                                    tb.Search();
                                })
                                .Events(e => e.DataBound("onDataBound").SaveChanges("onGridSave").Save("onGridSave"))
                                .DataSource(ds => ds.Ajax()
                                    .PageSize(10)
                                    .Events(events => events.Error("error_handler"))
                                    .Read(r => r.Url("/StudioAdmin/ScoringTemplate?handler=ReadPointsSystem").Data("forgeryToken"))
                                    .Create(c => c.Url("/StudioAdmin/ScoringTemplate?handler=CreatePointsSystem").Data("forgeryToken"))
                                    .Update(u => u.Url("/StudioAdmin/ScoringTemplate?handler=UpdatePointsSystem").Data("forgeryToken"))
                                    .Destroy(d => d.Url("/StudioAdmin/ScoringTemplate?handler=DestroyPointsSystem").Data("forgeryToken"))
                                    .Model(m =>
                                    {
                                        m.Id(id => id.PointsSystemId);
                                    })
                                )
                              )
                            </div>);
                })
            )





        </div>
    </div>
</div>

<script>
    var gymId = 0;

    function forgeryToken() {
        return kendo.antiForgeryTokens();
    }

    function onChange() {
        var gymlist = $("#Gym").data("kendoDropDownList");
        gymId = gymlist.value();

        var gridObject = $("#grdWeightedSystem").data("kendoGrid")
        gridObject.dataSource.transport.options.read.url = "/StudioAdmin/ScoringTemplate?handler=ReadWeightedSystem&gymId=" + gymId;
        gridObject.dataSource.read();

        var gridObject = $("#grdPointsSystem").data("kendoGrid")
        gridObject.dataSource.transport.options.read.url = "/StudioAdmin/ScoringTemplate?handler=ReadPointsSystem&gymId=" + gymId;
        gridObject.dataSource.read();
    }

    function error_handler(e) {
        if (e.errors) {
            var message = "";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            iziToast.error({
                title: 'Error',
                message: message,
                position: 'center'
            });

            var gridObject = $("#grdWeightedSystem").data("kendoGrid");
            gridObject.dataSource.transport.options.read.url = "/StudioAdmin/ScoringTemplate?handler=ReadWeightedSystem&gymId=" + gymId;
            gridObject.dataSource.read();
        }
    }

    function onDataBound() {
        //position the add new button to the left.
        $(".k-grid-toolbar").addClass("text-left");
    }

    function onGridSave(e) {
        e.sender.one("dataBound", function () {
            e.sender.dataSource.read();          
        });
    }
</script>
