@page
@model Internal.Website.ChallengeManagementModel
@using DataAccess.Models
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
@{ ViewData["Title"] = "Challenge Management"; }

<div class="bg-light content-maint mh-100 min-vh-100">
    <div class="row mh-100 min-vh-100">
        <div class="col-md-12 mh-100 min-vh-100">
            <div class="col text-left">
                <h4 class="k-primary">
                    <small class="k-text-primary">@ViewData["Title"]</small>
                </h4>
            </div>
            <div class="col-md-6 text-left" style="padding:0.5em">
                @Html.Label("Parent Studio: ")
                @(Html.Kendo().DropDownList()
                    .Name("Gym")
                    .DataTextField("GymName")
                    .DataValueField("GlobalTrainingGymId")
                    .Events(e => e.Change("onChange"))
                    .BindTo((System.Collections.IEnumerable)ViewData["gym"])
                    .HtmlAttributes(new { style = "width:30%;" }))
            </div>
            @Html.AntiForgeryToken()
            @(Html.Kendo().Grid<Challenge>()
                .Name("grdChallenges")
                .Columns(columns =>
                {
                    columns.Bound(c => c.ChallengeNo).ClientTemplate("Challenge #=ChallengeNo#").Width("10%");
                    columns.Bound(c => c.StartDate).Width("10%").Format("{0:d}");
                    columns.Bound(c => c.EndDate).Width("10%").Format("{0:d}");
                    columns.Bound(c => c.StartScanFromDate).Width("10%").Format("{0:d}").Filterable(false);
                    columns.Bound(c => c.StartScanToDate).Width("10%").Format("{0:d}").Filterable(false);
                    columns.Bound(c => c.MidScanFromDate).Width("10%").Format("{0:d}").Filterable(false);
                    columns.Bound(c => c.MidScanToDate).Width("10%").Format("{0:d}").Filterable(false);
                    columns.Bound(c => c.EndScanFromDate).Width("0%").Format("{0:d}").Filterable(false);
                    columns.Bound(c => c.EndScanToDate).Width("10%").Format("{0:d}").Filterable(false);
                    columns.Command(c =>
                    {
                        //c.Custom("ValidateVisits").Text(" ").IconClass("k-icon k-i-validation-data").HtmlAttributes(new { style = "align-text:center" }).Click("validateVisits");
                        c.Edit().Text(" ").IconClass("k-icon k-i-edit").HtmlAttributes(new { style = "align-text:center" });
                        c.Destroy().Text(" ").IconClass("k-icon k-i-delete").HtmlAttributes(new { style = "align-text:center" });
                    }).Title("Actions");
                }).HtmlAttributes(new { @class = "text-center" })
                .Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("CustomChallengeEditor").Window(w => w.Title("New Challenge Details"))
                )
                //.ClientDetailTemplateId("template")
                .Navigatable()
                .Filterable(filterable => filterable
                    .Extra(false)
                    .Operators(operators => operators
                        .ForString(str => str.Clear()
                            .StartsWith("Starts with")
                            .IsEqualTo("Is equal to")
                            .IsNotEqualTo("Is not equal to")
                        ))
                    )
                .Mobile()
                .Sortable()
                .Scrollable(scr => scr.Height(400))
                .HtmlAttributes(new { style = "height:100%; width:auto; font-size:13px;" })
                .Pageable(p =>
                {
                    p.ButtonCount(5);
                    p.PageSizes(true);
                })
                .ToolBar(tb =>
                {
                    tb.Create().Text("New Challenge").IconClass("k-icon k-i-dictionary-add");
                    tb.Search();
                })
                .Search(search =>
                {
                    search.Field(f => f.ChallengeNo);
                })
                .Events(e => e.DataBound("onDataBound").SaveChanges("onGridSave").Save("onGridSave"))
                .DataSource(ds => ds.Ajax()
                    .PageSize(10)
                    .Events(events => events.Error("error_handler"))
                    .Read(r => r.Url("/StudioAdmin/ChallengeManagement?handler=Read").Data("forgeryToken"))
                    .Create(c => c.Url("/StudioAdmin/ChallengeManagement?handler=Create").Data("forgeryToken"))
                    .Update(u => u.Url("/StudioAdmin/ChallengeManagement?handler=Update").Data("forgeryToken"))
                    .Destroy(d => d.Url("/StudioAdmin/ChallengeManagement?handler=Destroy").Data("forgeryToken"))
                    .Model(m =>
                    {
                        m.Id(id => id.ChallengeId);
                        m.Field(x => x.ChallengeId).Editable(false);
                    })
                )
            )
        </div>
    </div>
</div>

@*<script id="template" type="text/kendo-tmpl">
    @Html.AntiForgeryToken()
    @(Html.Kendo().Grid<UserStudioViewModel>()
        .Name("grid_#=AppUserId#")
        .Columns(columns =>
        {
            columns.Bound(c => c.StudioName)
            .Title("Studio Name").Width("90%").HeaderHtmlAttributes(new { style = "text-align:center" });
            columns.Command(c =>
            {
                c.Destroy().Text(" ").IconClass("k-icon k-i-delete").HtmlAttributes(new { style = "align-text:center" });
            }).Title("Remove").HtmlAttributes(new { @class = "text-center" }).HeaderHtmlAttributes(new { @class = "text-center" });
        })
        .ToolBar(tb =>tb.Create().Text("Add Studio").IconClass("k-icon .k-i-marker-pin"))
        .Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("CustomUserStudioEditor").Window(w => w.Title("Assign New Studio")))
        .Navigatable()
        .Sortable()
        .Filterable()
        .Mobile()
        .Scrollable(scr => scr.Height(150))
        .HtmlAttributes(new { style = "height:100%; width:auto; font-size:13px;" })
        .Pageable(p =>
        {
            p.ButtonCount(5);
            p.PageSizes(true);
        })
        .DataSource(dataSource => dataSource
            .Ajax()
            .Events(events => events.Error("error_handlerStudio"))
            .Read(r => r.Url("/StudioAdmin/ManagerAdmin?handler=ReadStudio&userId=#=AppUserId#").Data("forgeryToken"))
            .Create(c => c.Url("/StudioAdmin/ManagerAdmin?handler=AssignStudio&userId=#=AppUserId#").Data("forgeryToken"))
            .Destroy(d => d.Url("/StudioAdmin/ManagerAdmin?handler=DestroyStudio&userId=#=AppUserId#").Data("forgeryToken"))
            .Model(m =>
            {
                m.Id(id => id.StudioUserId);
            })
            .PageSize(10)
        )
        .Events(events => events.Save("onStudioSave").SaveChanges("onStudioSave"))
        .ToClientTemplate()
    )
</script>*@

<div id="ValidateVisits" style="display:none">
    <div class="col-md-12" style="float:none; margin:auto;">       
        <label class="km-inline-field km-label-above" style="width:100%;">          
            @Html.Label("Studios: ")
            @(Html.Kendo().DropDownList()
                .Name("Studio")
                .DataTextField("StudioName")
                .DataValueField("StudioId")
                .BindTo((System.Collections.IEnumerable)ViewData["studios"])
                .HtmlAttributes(new { style = "width:100%;"}))
        </label>
        <label class="km-inline-field km-label-above" style="width:100%;">
            @Html.Label("Date From: ")
            @(Html.Kendo().DatePicker()
                .Name("DateFrom")
                .Value(DateTime.Now.AddMonths(-3))
                .Animation(true)
                .HtmlAttributes(new { style = "width:100%;float:left;overflow:hidden;", title = "Visit's Date From" })
                .DateInput())
        </label>
        <label class="km-inline-field km-label-above" style="width:100%;">
            @Html.Label("Date To: ")
            @(Html.Kendo().DatePicker()
                .Name("DateTo")
                .Value(DateTime.Now)
                .Animation(true)
                .HtmlAttributes(new { style = "width:100%;float:left;overflow:hidden;", title = "Visit's Date To" })
                .DateInput())
        </label>       

        @(Html.Kendo().Button()
            .Name("Validate")
            .HtmlAttributes(new { type = "button", @class = "k-primary" })
            .Content("Update")
            .Events(ev => ev.Click("onClickValidateVisits")))
    </div>
</div>

<script>
    var challengeId = 0;
    var KendoWindowManager = {
        InitKendoWindow: function () {
            $('#ValidateVisits').kendoWindow({
                title: "Visits Validation",
                width: "35%",
                modal: true,
                actions: ["Close"],
                visible: false
            });           
        }
    }

    $(document).ready(function () {
        KendoWindowManager.InitKendoWindow();
    });    

    function forgeryToken() {
        return kendo.antiForgeryTokens();
    }

    function onChange() {
        var gymlist = $("#Gym").data("kendoDropDownList");
        gymId = gymlist.value();
        var gridObject = $("#grdChallenges").data("kendoGrid")
        gridObject.dataSource.transport.options.read.url = "/StudioAdmin/ChallengeManagement?handler=Read&gymId=" + gymId;
        gridObject.dataSource.read();
    }

    function error_handler(e) {
        if (e.errors) {
            var message = "";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            iziToast.error({
                title: 'Error',
                message: message,
                position: 'center'
            });

            var gridObject = $("#grdChallenges").data("kendoGrid");
            gridObject.dataSource.transport.options.read.url = "/StudioAdmin/ChallengeManagement?handler=Read";
            gridObject.dataSource.read();
        }
    }

    function onDataBound() {
        //position the add new button to the left.
        $(".k-grid-toolbar").addClass("text-left");
    }

    function onGridSave(e) {
        e.sender.one("dataBound", function () {
            e.sender.dataSource.read();
            //reloadPage();
        });
    }

    function reloadPage() {
        location.reload(true);
    }

    function validateVisits(e) {
        e.preventDefault();   
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var wnd = $("#ValidateVisits").data("kendoWindow");
        console.log(dataItem.ChallengeId);
        challengeId = dataItem.ChallengeId;
        wnd.center().open();
    }
    function onClickValidateVisits() {

        kendo.confirm("Are you sure that you want to proceed?").then(function () {
        var studioId = $("#Studio").data("kendoDropDownList").value();
        var StartValue = $("#DateFrom").data("kendoDatePicker").value();
        var EndValue = $("#DateTo").data("kendoDatePicker").value();            


        var dateFrom = (StartValue.getDate()) + "/" + (StartValue.getMonth() + 1) + "/" + (StartValue.getFullYear());
        var dateTo = (EndValue.getDate()) + "/" + (EndValue.getMonth() + 1) + "/" + (EndValue.getFullYear());

        var data = {
            studioId,
            challengeId,
            dateFrom,
            dateTo
        }

            $.ajax({
                type: "POST",
                url: "/StudioAdmin/ChallengeManagement?handler=ValidateVisits",
                data: data,
                dataType: 'json',
                contentType: "application/x-www-form-urlencoded",
                headers: {
                    RequestVerificationToken: $('input:hidden[name="__RequestVerificationToken"]').val()
                },
                success: function (result) {
                    if (result) {
                        iziToast.success({
                            title: 'Success',
                            message: "Validation successfull.",
                        });
                    } else {
                        iziToast.error({
                            title: 'Error',
                            message: "Validation failed."
                        });
                    }           
                    var wnd = $("#ValidateVisits").data("kendoWindow");
                    wnd.close();
                },
                error: function () {
                    iziToast.error({
                        title: 'Error',
                        message: 'Unable to update record. Please contact your system administrator.'
                    });
                }
            });
        });
    }

   
</script>